// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Dynamics.CustomerInsights.Api.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Base class to represent a measure expression
    /// </summary>
    public partial class MeasureExpression
    {
        /// <summary>
        /// Initializes a new instance of the MeasureExpression class.
        /// </summary>
        public MeasureExpression()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MeasureExpression class.
        /// </summary>
        /// <param name="kind">Possible values include: 'constant', 'property',
        /// 'memberAccess', 'functionCall', 'and', 'or', 'equals', 'notEquals',
        /// 'greaterThan', 'greaterThanOrEqualTo', 'lessThan',
        /// 'lessThanOrEqualTo', 'contains', 'startsWith', 'endsWith',
        /// 'isNull', 'isNotNull', 'negate', 'add', 'subtract', 'multiply',
        /// 'divide', 'modulo', 'exponent', 'today', 'now'</param>
        public MeasureExpression(string kind = default(string))
        {
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'constant', 'property',
        /// 'memberAccess', 'functionCall', 'and', 'or', 'equals', 'notEquals',
        /// 'greaterThan', 'greaterThanOrEqualTo', 'lessThan',
        /// 'lessThanOrEqualTo', 'contains', 'startsWith', 'endsWith',
        /// 'isNull', 'isNotNull', 'negate', 'add', 'subtract', 'multiply',
        /// 'divide', 'modulo', 'exponent', 'today', 'now'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

    }
}
