// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Dynamics.CustomerInsights.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomerInsights.
    /// </summary>
    public static partial class CustomerInsightsExtensions
    {
            /// <summary>
            /// Gets the specific attribute profile for the entity.
            /// </summary>
            /// <remarks>
            /// Gets the specific attribute profile for the entity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='qualifiedEntityName'>
            /// Qualified Entity Name.
            /// </param>
            /// <param name='attributeName'>
            /// Attribute Name.
            /// </param>
            public static AttributeDataProfile GetAnAttributeProfile(this ICustomerInsights operations, string instanceId, string qualifiedEntityName, string attributeName)
            {
                return operations.GetAnAttributeProfileAsync(instanceId, qualifiedEntityName, attributeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specific attribute profile for the entity.
            /// </summary>
            /// <remarks>
            /// Gets the specific attribute profile for the entity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='qualifiedEntityName'>
            /// Qualified Entity Name.
            /// </param>
            /// <param name='attributeName'>
            /// Attribute Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttributeDataProfile> GetAnAttributeProfileAsync(this ICustomerInsights operations, string instanceId, string qualifiedEntityName, string attributeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAnAttributeProfileWithHttpMessagesAsync(instanceId, qualifiedEntityName, attributeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches a collection of DataSourceInfo configured for the Customer Insights
            /// instance.
            /// </summary>
            /// <remarks>
            /// Fetches a collection of DataSourceInfo configured for the Customer Insights
            /// instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id for which to fetch data source info.
            /// </param>
            public static object GetAllDataSources(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetAllDataSourcesAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches a collection of DataSourceInfo configured for the Customer Insights
            /// instance.
            /// </summary>
            /// <remarks>
            /// Fetches a collection of DataSourceInfo configured for the Customer Insights
            /// instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id for which to fetch data source info.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllDataSourcesAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDataSourcesWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches a DataSourceInfo matching the dataSourceId configured for the
            /// Customer Insights instance.
            /// </summary>
            /// <remarks>
            /// Fetches a DataSourceInfo matching the dataSourceId configured for the
            /// Customer Insights instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id to fetch data source info for.
            /// </param>
            /// <param name='dataSourceId'>
            /// Format - uuid. The data source id to fetch info for.
            /// </param>
            public static object GetDataSource(this ICustomerInsights operations, string instanceId, string dataSourceId)
            {
                return operations.GetDataSourceAsync(instanceId, dataSourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches a DataSourceInfo matching the dataSourceId configured for the
            /// Customer Insights instance.
            /// </summary>
            /// <remarks>
            /// Fetches a DataSourceInfo matching the dataSourceId configured for the
            /// Customer Insights instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id to fetch data source info for.
            /// </param>
            /// <param name='dataSourceId'>
            /// Format - uuid. The data source id to fetch info for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataSourceAsync(this ICustomerInsights operations, string instanceId, string dataSourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataSourceWithHttpMessagesAsync(instanceId, dataSourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a data source from the instance.
            /// </summary>
            /// <remarks>
            /// Deletes a data source from the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='dataSourceId'>
            /// Format - uuid. The data source id.
            /// </param>
            public static object DeleteADataSource(this ICustomerInsights operations, string instanceId, string dataSourceId)
            {
                return operations.DeleteADataSourceAsync(instanceId, dataSourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a data source from the instance.
            /// </summary>
            /// <remarks>
            /// Deletes a data source from the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='dataSourceId'>
            /// Format - uuid. The data source id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteADataSourceAsync(this ICustomerInsights operations, string instanceId, string dataSourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteADataSourceWithHttpMessagesAsync(instanceId, dataSourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Writes an entity instance into the store, g. an activity entity. (Preview)
            /// </summary>
            /// <remarks>
            /// Writes an entity instance into the store, g. an activity entity. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance Id.
            /// </param>
            /// <param name='entityName'>
            /// Fully qualified entity name, consisting of 'DataSource_EntityName' e.g.
            /// 'PoS_posPurchases', or 'UnifiedActivity'.
            /// </param>
            /// <param name='body'>
            /// JSON document representing the entity. The schema must be consistent with
            /// the entity metadata. Use GET action of this resource to obtain an example.
            /// </param>
            /// <param name='validUntil'>
            /// Format - date-time (as date-time in RFC3339). Expiration time of the
            /// change; ISO8601; optional. The value can be maximum 30 days in the future.
            /// If the datasource for this entity doesn't contain the changes after this
            /// time, the update disappears from the store.
            /// </param>
            /// <param name='caller'>
            /// String to identify the caller; optional.
            /// </param>
            public static object CreateAnEntity(this ICustomerInsights operations, string instanceId, string entityName, object body = default(object), string validUntil = default(string), string caller = default(string))
            {
                return operations.CreateAnEntityAsync(instanceId, entityName, body, validUntil, caller).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Writes an entity instance into the store, g. an activity entity. (Preview)
            /// </summary>
            /// <remarks>
            /// Writes an entity instance into the store, g. an activity entity. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance Id.
            /// </param>
            /// <param name='entityName'>
            /// Fully qualified entity name, consisting of 'DataSource_EntityName' e.g.
            /// 'PoS_posPurchases', or 'UnifiedActivity'.
            /// </param>
            /// <param name='body'>
            /// JSON document representing the entity. The schema must be consistent with
            /// the entity metadata. Use GET action of this resource to obtain an example.
            /// </param>
            /// <param name='validUntil'>
            /// Format - date-time (as date-time in RFC3339). Expiration time of the
            /// change; ISO8601; optional. The value can be maximum 30 days in the future.
            /// If the datasource for this entity doesn't contain the changes after this
            /// time, the update disappears from the store.
            /// </param>
            /// <param name='caller'>
            /// String to identify the caller; optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAnEntityAsync(this ICustomerInsights operations, string instanceId, string entityName, object body = default(object), string validUntil = default(string), string caller = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAnEntityWithHttpMessagesAsync(instanceId, entityName, body, validUntil, caller, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an entity instance in the store, g. Customer entity. (Preview)
            /// </summary>
            /// <remarks>
            /// Updates an entity instance in the store, g. Customer entity. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance Id.
            /// </param>
            /// <param name='entityName'>
            /// Fully qualified entity name, e.g. 'Customer'.
            /// </param>
            /// <param name='entityId'>
            /// Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
            /// </param>
            /// <param name='body'>
            /// JSON document with set of changes to apply on the entity. Each change must
            /// be consistent with the entity metadata. Use GET action of this resource to
            /// obtain an example.
            /// </param>
            /// <param name='validUntil'>
            /// Format - date-time (as date-time in RFC3339). Expiration time of the
            /// change; ISO8601; optional. The value can be maximum 30 days in the future.
            /// If the datasource for this entity doesn't contain the changes after this
            /// time, the update disappears from the store.
            /// </param>
            /// <param name='caller'>
            /// String to identify the caller; optional.
            /// </param>
            public static object UpdateAnEntity(this ICustomerInsights operations, string instanceId, string entityName, string entityId, object body = default(object), string validUntil = default(string), string caller = default(string))
            {
                return operations.UpdateAnEntityAsync(instanceId, entityName, entityId, body, validUntil, caller).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an entity instance in the store, g. Customer entity. (Preview)
            /// </summary>
            /// <remarks>
            /// Updates an entity instance in the store, g. Customer entity. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance Id.
            /// </param>
            /// <param name='entityName'>
            /// Fully qualified entity name, e.g. 'Customer'.
            /// </param>
            /// <param name='entityId'>
            /// Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
            /// </param>
            /// <param name='body'>
            /// JSON document with set of changes to apply on the entity. Each change must
            /// be consistent with the entity metadata. Use GET action of this resource to
            /// obtain an example.
            /// </param>
            /// <param name='validUntil'>
            /// Format - date-time (as date-time in RFC3339). Expiration time of the
            /// change; ISO8601; optional. The value can be maximum 30 days in the future.
            /// If the datasource for this entity doesn't contain the changes after this
            /// time, the update disappears from the store.
            /// </param>
            /// <param name='caller'>
            /// String to identify the caller; optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAnEntityAsync(this ICustomerInsights operations, string instanceId, string entityName, string entityId, object body = default(object), string validUntil = default(string), string caller = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAnEntityWithHttpMessagesAsync(instanceId, entityName, entityId, body, validUntil, caller, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits an OData request to the service.
            /// </summary>
            /// <remarks>
            /// Submits an OData request to the service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='relativePath'>
            /// Relative OData path. See
            /// https://www.odata.org/getting-started/basic-tutorial/ for info.
            /// </param>
            /// <param name='forceSearch'>
            /// Whether force use search to support the query.
            /// </param>
            /// <param name='proxy'>
            /// Whether or not we are requesting data by proxy.
            /// </param>
            public static object GetEntitiesWithODataQueryParameters(this ICustomerInsights operations, string instanceId, string relativePath = default(string), bool? forceSearch = default(bool?), bool? proxy = default(bool?))
            {
                return operations.GetEntitiesWithODataQueryParametersAsync(instanceId, relativePath, forceSearch, proxy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits an OData request to the service.
            /// </summary>
            /// <remarks>
            /// Submits an OData request to the service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='relativePath'>
            /// Relative OData path. See
            /// https://www.odata.org/getting-started/basic-tutorial/ for info.
            /// </param>
            /// <param name='forceSearch'>
            /// Whether force use search to support the query.
            /// </param>
            /// <param name='proxy'>
            /// Whether or not we are requesting data by proxy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEntitiesWithODataQueryParametersAsync(this ICustomerInsights operations, string instanceId, string relativePath = default(string), bool? forceSearch = default(bool?), bool? proxy = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitiesWithODataQueryParametersWithHttpMessagesAsync(instanceId, relativePath, forceSearch, proxy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the flattened entity model for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves the flattened entity model for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='attributesAnnotations'>
            /// Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be
            /// included.
            /// </param>
            /// <param name='includeQuarantined'>
            /// Indicates if quarantined entities should be included in the output entity
            /// model.
            /// </param>
            public static object GetAllEntityMetadata(this ICustomerInsights operations, string instanceId, bool? attributesAnnotations = false, bool? includeQuarantined = false)
            {
                return operations.GetAllEntityMetadataAsync(instanceId, attributesAnnotations, includeQuarantined).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the flattened entity model for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves the flattened entity model for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='attributesAnnotations'>
            /// Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be
            /// included.
            /// </param>
            /// <param name='includeQuarantined'>
            /// Indicates if quarantined entities should be included in the output entity
            /// model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllEntityMetadataAsync(this ICustomerInsights operations, string instanceId, bool? attributesAnnotations = false, bool? includeQuarantined = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllEntityMetadataWithHttpMessagesAsync(instanceId, attributesAnnotations, includeQuarantined, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the entity metadata for the provided instanceId and entityName.
            /// </summary>
            /// <remarks>
            /// Retrieves the entity metadata for the provided instanceId and entityName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='entityName'>
            /// Entity name
            /// </param>
            /// <param name='attributesAnnotations'>
            /// Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be
            /// included.
            /// </param>
            public static object GetEntityMetadata(this ICustomerInsights operations, string instanceId, string entityName, bool? attributesAnnotations = false)
            {
                return operations.GetEntityMetadataAsync(instanceId, entityName, attributesAnnotations).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the entity metadata for the provided instanceId and entityName.
            /// </summary>
            /// <remarks>
            /// Retrieves the entity metadata for the provided instanceId and entityName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='entityName'>
            /// Entity name
            /// </param>
            /// <param name='attributesAnnotations'>
            /// Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be
            /// included.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEntityMetadataAsync(this ICustomerInsights operations, string instanceId, string entityName, bool? attributesAnnotations = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityMetadataWithHttpMessagesAsync(instanceId, entityName, attributesAnnotations, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the entity size for the provided instanceId and entityName.
            /// </summary>
            /// <remarks>
            /// Retrieves the entity size for the provided instanceId and entityName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='entityName'>
            /// Entity name
            /// </param>
            public static object GetEntitySize(this ICustomerInsights operations, string instanceId, string entityName)
            {
                return operations.GetEntitySizeAsync(instanceId, entityName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the entity size for the provided instanceId and entityName.
            /// </summary>
            /// <remarks>
            /// Retrieves the entity size for the provided instanceId and entityName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='entityName'>
            /// Entity name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEntitySizeAsync(this ICustomerInsights operations, string instanceId, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitySizeWithHttpMessagesAsync(instanceId, entityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </summary>
            /// <remarks>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance Id.
            /// </param>
            /// <param name='instanceManagementOperationScope'>
            /// The management operation scope for reset.
            /// </param>
            public static object ResetAnInstance(this ICustomerInsights operations, string instanceId, string instanceManagementOperationScope = default(string))
            {
                return operations.ResetAnInstanceAsync(instanceId, instanceManagementOperationScope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </summary>
            /// <remarks>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance Id.
            /// </param>
            /// <param name='instanceManagementOperationScope'>
            /// The management operation scope for reset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetAnInstanceAsync(this ICustomerInsights operations, string instanceId, string instanceManagementOperationScope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetAnInstanceWithHttpMessagesAsync(instanceId, instanceManagementOperationScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </summary>
            /// <remarks>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance Id.
            /// </param>
            /// <param name='instanceManagementOperationScope'>
            /// The management operation scope for reset.
            /// </param>
            public static object ResetInstanceForScope(this ICustomerInsights operations, string instanceId, string instanceManagementOperationScope)
            {
                return operations.ResetInstanceForScopeAsync(instanceId, instanceManagementOperationScope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </summary>
            /// <remarks>
            /// Reset scopes in the given instance. Provide optional management operation
            /// scope to reset only that scope. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance Id.
            /// </param>
            /// <param name='instanceManagementOperationScope'>
            /// The management operation scope for reset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetInstanceForScopeAsync(this ICustomerInsights operations, string instanceId, string instanceManagementOperationScope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetInstanceForScopeWithHttpMessagesAsync(instanceId, instanceManagementOperationScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all instances of the current user.
            /// </summary>
            /// <remarks>
            /// Retrieves all instances of the current user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllInstances(this ICustomerInsights operations)
            {
                return operations.GetAllInstancesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all instances of the current user.
            /// </summary>
            /// <remarks>
            /// Retrieves all instances of the current user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllInstancesAsync(this ICustomerInsights operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllInstancesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves instances based on instance ids, it can only accept batch of
            /// instances.
            /// </summary>
            /// <remarks>
            /// Retrieves instances based on instance ids, it can only accept batch of
            /// instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Instance ids of instances to get.
            /// </param>
            public static object GetAllInstancesInBatchesByInstanceids(this ICustomerInsights operations, IList<System.Guid?> body = default(IList<System.Guid?>))
            {
                return operations.GetAllInstancesInBatchesByInstanceidsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves instances based on instance ids, it can only accept batch of
            /// instances.
            /// </summary>
            /// <remarks>
            /// Retrieves instances based on instance ids, it can only accept batch of
            /// instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Instance ids of instances to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllInstancesInBatchesByInstanceidsAsync(this ICustomerInsights operations, IList<System.Guid?> body = default(IList<System.Guid?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllInstancesInBatchesByInstanceidsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves metadata for a Customer Insights instance based on its
            /// instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves metadata for a Customer Insights instance based on its
            /// instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Unique id for the Customer Insights instance.
            /// </param>
            public static object GetInstanceMetadata(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetInstanceMetadataAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves metadata for a Customer Insights instance based on its
            /// instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves metadata for a Customer Insights instance based on its
            /// instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Unique id for the Customer Insights instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInstanceMetadataAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceMetadataWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detele an instance.
            /// </summary>
            /// <remarks>
            /// Detele an instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            public static object DeleteAnInstance(this ICustomerInsights operations, string instanceId)
            {
                return operations.DeleteAnInstanceAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detele an instance.
            /// </summary>
            /// <remarks>
            /// Detele an instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAnInstanceAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAnInstanceWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new instance.
            /// </summary>
            /// <remarks>
            /// Creates a new instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The instance creation request.
            /// </param>
            /// <param name='isTrial'>
            /// True if the new instance is a trial instance. False otherwise.
            /// </param>
            public static object CreateAnInstance(this ICustomerInsights operations, InstanceCreationRequest body = default(InstanceCreationRequest), bool? isTrial = false)
            {
                return operations.CreateAnInstanceAsync(body, isTrial).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new instance.
            /// </summary>
            /// <remarks>
            /// Creates a new instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The instance creation request.
            /// </param>
            /// <param name='isTrial'>
            /// True if the new instance is a trial instance. False otherwise.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAnInstanceAsync(this ICustomerInsights operations, InstanceCreationRequest body = default(InstanceCreationRequest), bool? isTrial = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAnInstanceWithHttpMessagesAsync(body, isTrial, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patches the Market Verticals, Display name, Domain Name, CDS environment
            /// and BYOSA secret to the instance.
            /// </summary>
            /// <remarks>
            /// Patches the Market Verticals, Display name, Domain Name, CDS environment
            /// and BYOSA secret to the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateAnInstance(this ICustomerInsights operations, string instanceId, InstanceCreationRequest body = default(InstanceCreationRequest))
            {
                return operations.UpdateAnInstanceAsync(instanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patches the Market Verticals, Display name, Domain Name, CDS environment
            /// and BYOSA secret to the instance.
            /// </summary>
            /// <remarks>
            /// Patches the Market Verticals, Display name, Domain Name, CDS environment
            /// and BYOSA secret to the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAnInstanceAsync(this ICustomerInsights operations, string instanceId, InstanceCreationRequest body = default(InstanceCreationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAnInstanceWithHttpMessagesAsync(instanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new instance and copy metadata from an existing instance.
            /// </summary>
            /// <remarks>
            /// Create a new instance and copy metadata from an existing instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The metadata to use to create the new instance.
            /// </param>
            /// <param name='isTrial'>
            /// True if the new instance is a trial instance. False otherwise.
            /// </param>
            public static object CopyAnInstance(this ICustomerInsights operations, InstanceCopyRequest body = default(InstanceCopyRequest), bool? isTrial = false)
            {
                return operations.CopyAnInstanceAsync(body, isTrial).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new instance and copy metadata from an existing instance.
            /// </summary>
            /// <remarks>
            /// Create a new instance and copy metadata from an existing instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The metadata to use to create the new instance.
            /// </param>
            /// <param name='isTrial'>
            /// True if the new instance is a trial instance. False otherwise.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CopyAnInstanceAsync(this ICustomerInsights operations, InstanceCopyRequest body = default(InstanceCopyRequest), bool? isTrial = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyAnInstanceWithHttpMessagesAsync(body, isTrial, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of measures metadata for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of measures metadata for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            public static object GetAListOfMeasuresMetadata(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetAListOfMeasuresMetadataAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of measures metadata for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of measures metadata for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAListOfMeasuresMetadataAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAListOfMeasuresMetadataWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new measure metadata with measureMetadata on instanceId.
            /// </summary>
            /// <remarks>
            /// Create new measure metadata with measureMetadata on instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='body'>
            /// New Measure metadata to be created
            /// </param>
            public static object CreateAMeasure(this ICustomerInsights operations, string instanceId, MeasureMetadata body = default(MeasureMetadata))
            {
                return operations.CreateAMeasureAsync(instanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new measure metadata with measureMetadata on instanceId.
            /// </summary>
            /// <remarks>
            /// Create new measure metadata with measureMetadata on instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='body'>
            /// New Measure metadata to be created
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAMeasureAsync(this ICustomerInsights operations, string instanceId, MeasureMetadata body = default(MeasureMetadata), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAMeasureWithHttpMessagesAsync(instanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the measure metadata for the provided instanceId and measureName.
            /// </summary>
            /// <remarks>
            /// Retrieves the measure metadata for the provided instanceId and measureName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='measureName'>
            /// Name of the measure
            /// </param>
            /// <param name='includeHistoricStats'>
            /// Boolean for historical stats
            /// </param>
            /// <param name='historicStatsDays'>
            /// Format - int32. Number of lookback days
            /// </param>
            public static object GetMetadataForAMeasure(this ICustomerInsights operations, string instanceId, string measureName, bool? includeHistoricStats = false, int? historicStatsDays = 30)
            {
                return operations.GetMetadataForAMeasureAsync(instanceId, measureName, includeHistoricStats, historicStatsDays).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the measure metadata for the provided instanceId and measureName.
            /// </summary>
            /// <remarks>
            /// Retrieves the measure metadata for the provided instanceId and measureName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='measureName'>
            /// Name of the measure
            /// </param>
            /// <param name='includeHistoricStats'>
            /// Boolean for historical stats
            /// </param>
            /// <param name='historicStatsDays'>
            /// Format - int32. Number of lookback days
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMetadataForAMeasureAsync(this ICustomerInsights operations, string instanceId, string measureName, bool? includeHistoricStats = false, int? historicStatsDays = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMetadataForAMeasureWithHttpMessagesAsync(instanceId, measureName, includeHistoricStats, historicStatsDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates measures metadata for the provided instanceId and measureMetadata.
            /// Existing measure is retrieved using measureName.
            /// </summary>
            /// <remarks>
            /// Updates measures metadata for the provided instanceId and measureMetadata.
            /// Existing measure is retrieved using measureName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='measureName'>
            /// Name of the measure
            /// </param>
            /// <param name='body'>
            /// Update measure metadata
            /// </param>
            public static object UpdateAMeasure(this ICustomerInsights operations, string instanceId, string measureName, MeasureMetadata body = default(MeasureMetadata))
            {
                return operations.UpdateAMeasureAsync(instanceId, measureName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates measures metadata for the provided instanceId and measureMetadata.
            /// Existing measure is retrieved using measureName.
            /// </summary>
            /// <remarks>
            /// Updates measures metadata for the provided instanceId and measureMetadata.
            /// Existing measure is retrieved using measureName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='measureName'>
            /// Name of the measure
            /// </param>
            /// <param name='body'>
            /// Update measure metadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAMeasureAsync(this ICustomerInsights operations, string instanceId, string measureName, MeasureMetadata body = default(MeasureMetadata), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAMeasureWithHttpMessagesAsync(instanceId, measureName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the measure metadata for the provided instanceId using measureName.
            /// </summary>
            /// <remarks>
            /// Deletes the measure metadata for the provided instanceId using measureName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='measureName'>
            /// Name of the measure
            /// </param>
            public static object DeleteAMeasure(this ICustomerInsights operations, string instanceId, string measureName)
            {
                return operations.DeleteAMeasureAsync(instanceId, measureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the measure metadata for the provided instanceId using measureName.
            /// </summary>
            /// <remarks>
            /// Deletes the measure metadata for the provided instanceId using measureName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='measureName'>
            /// Name of the measure
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAMeasureAsync(this ICustomerInsights operations, string instanceId, string measureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAMeasureWithHttpMessagesAsync(instanceId, measureName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the KeyRing (collection of all alternate keys) for the given instance
            /// by alternate key.
            /// </summary>
            /// <remarks>
            /// Gets the KeyRing (collection of all alternate keys) for the given instance
            /// by alternate key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Identifier for the instance
            /// </param>
            /// <param name='dataSourceName'>
            /// The name of the datasource that contains the given entity.
            /// </param>
            /// <param name='entityName'>
            /// The name of the entity that contains the given key.
            /// </param>
            /// <param name='key'>
            /// The value of the alternate key provided.
            /// </param>
            public static ApiErrorResult GetKeyRing(this ICustomerInsights operations, string instanceId, string dataSourceName, string entityName, string key)
            {
                return operations.GetKeyRingAsync(instanceId, dataSourceName, entityName, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the KeyRing (collection of all alternate keys) for the given instance
            /// by alternate key.
            /// </summary>
            /// <remarks>
            /// Gets the KeyRing (collection of all alternate keys) for the given instance
            /// by alternate key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Identifier for the instance
            /// </param>
            /// <param name='dataSourceName'>
            /// The name of the datasource that contains the given entity.
            /// </param>
            /// <param name='entityName'>
            /// The name of the entity that contains the given key.
            /// </param>
            /// <param name='key'>
            /// The value of the alternate key provided.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiErrorResult> GetKeyRingAsync(this ICustomerInsights operations, string instanceId, string dataSourceName, string entityName, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyRingWithHttpMessagesAsync(instanceId, dataSourceName, entityName, key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the profile store state infoformation.
            /// </summary>
            /// <remarks>
            /// Gets the profile store state infoformation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            public static object GetProfileStoreState(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetProfileStoreStateAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the profile store state infoformation.
            /// </summary>
            /// <remarks>
            /// Gets the profile store state infoformation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProfileStoreStateAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileStoreStateWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all role definitions.
            /// </summary>
            /// <remarks>
            /// Get all role definitions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            public static IList<RoleDefinition> GetAllRoleDefinitions(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetAllRoleDefinitionsAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all role definitions.
            /// </summary>
            /// <remarks>
            /// Get all role definitions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RoleDefinition>> GetAllRoleDefinitionsAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllRoleDefinitionsWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get role of current user.
            /// </summary>
            /// <remarks>
            /// Get role of current user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            public static RoleAssignment GetCurrentUserRole(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetCurrentUserRoleAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get role of current user.
            /// </summary>
            /// <remarks>
            /// Get role of current user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> GetCurrentUserRoleAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserRoleWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates a role assignment for a principal.
            /// </summary>
            /// <remarks>
            /// Adds or updates a role assignment for a principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='principalId'>
            /// The principal id.
            /// </param>
            /// <param name='body'>
            /// The role assignment.
            /// </param>
            public static IList<RoleAssignment> UpdateARoleAssignment(this ICustomerInsights operations, string instanceId, string principalId, RoleAssignment body = default(RoleAssignment))
            {
                return operations.UpdateARoleAssignmentAsync(instanceId, principalId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates a role assignment for a principal.
            /// </summary>
            /// <remarks>
            /// Adds or updates a role assignment for a principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='principalId'>
            /// The principal id.
            /// </param>
            /// <param name='body'>
            /// The role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RoleAssignment>> UpdateARoleAssignmentAsync(this ICustomerInsights operations, string instanceId, string principalId, RoleAssignment body = default(RoleAssignment), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateARoleAssignmentWithHttpMessagesAsync(instanceId, principalId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a role assignment for the principal.
            /// </summary>
            /// <remarks>
            /// Deletes a role assignment for the principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='principalId'>
            /// The principal id.
            /// </param>
            public static DeletesARoleAssignmentHeaders DeletesARoleAssignment(this ICustomerInsights operations, string instanceId, string principalId)
            {
                return operations.DeletesARoleAssignmentAsync(instanceId, principalId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a role assignment for the principal.
            /// </summary>
            /// <remarks>
            /// Deletes a role assignment for the principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='principalId'>
            /// The principal id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletesARoleAssignmentHeaders> DeletesARoleAssignmentAsync(this ICustomerInsights operations, string instanceId, string principalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletesARoleAssignmentWithHttpMessagesAsync(instanceId, principalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets all role assignments for the instance.
            /// </summary>
            /// <remarks>
            /// Gets all role assignments for the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            public static IList<RoleAssignment> GetAllRoleAssignments(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetAllRoleAssignmentsAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all role assignments for the instance.
            /// </summary>
            /// <remarks>
            /// Gets all role assignments for the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RoleAssignment>> GetAllRoleAssignmentsAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllRoleAssignmentsWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all relationship metadata for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Gets all relationship metadata for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            public static object GetAllRelationships(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetAllRelationshipsAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all relationship metadata for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Gets all relationship metadata for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllRelationshipsAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllRelationshipsWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new relationship metadata for the provided instanceId, using input.
            /// </summary>
            /// <remarks>
            /// Creates new relationship metadata for the provided instanceId, using input.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='body'>
            /// The updated relationship metadata
            /// </param>
            public static object CreateARelationship(this ICustomerInsights operations, string instanceId, RelationshipMetadata body = default(RelationshipMetadata))
            {
                return operations.CreateARelationshipAsync(instanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new relationship metadata for the provided instanceId, using input.
            /// </summary>
            /// <remarks>
            /// Creates new relationship metadata for the provided instanceId, using input.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='body'>
            /// The updated relationship metadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateARelationshipAsync(this ICustomerInsights operations, string instanceId, RelationshipMetadata body = default(RelationshipMetadata), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateARelationshipWithHttpMessagesAsync(instanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </summary>
            /// <remarks>
            /// Gets the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='relationshipName'>
            /// Relationship name
            /// </param>
            public static object GetARelationship(this ICustomerInsights operations, string instanceId, string relationshipName)
            {
                return operations.GetARelationshipAsync(instanceId, relationshipName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </summary>
            /// <remarks>
            /// Gets the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='relationshipName'>
            /// Relationship name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetARelationshipAsync(this ICustomerInsights operations, string instanceId, string relationshipName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetARelationshipWithHttpMessagesAsync(instanceId, relationshipName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </summary>
            /// <remarks>
            /// Deletes the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='relationshipName'>
            /// Relationship name
            /// </param>
            public static object DeleteARelationship(this ICustomerInsights operations, string instanceId, string relationshipName)
            {
                return operations.DeleteARelationshipAsync(instanceId, relationshipName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </summary>
            /// <remarks>
            /// Deletes the relationship metadata for the provided instanceId and
            /// relationshipName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='relationshipName'>
            /// Relationship name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteARelationshipAsync(this ICustomerInsights operations, string instanceId, string relationshipName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteARelationshipWithHttpMessagesAsync(instanceId, relationshipName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the relationship metadata for the provided instanceId and
            /// relationshipName, using input.
            /// </summary>
            /// <remarks>
            /// Updates the relationship metadata for the provided instanceId and
            /// relationshipName, using input.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='relationshipName'>
            /// Relationship name
            /// </param>
            /// <param name='body'>
            /// The updated relationship metadata
            /// </param>
            public static object UpdateARelationship(this ICustomerInsights operations, string instanceId, string relationshipName, RelationshipMetadata body = default(RelationshipMetadata))
            {
                return operations.UpdateARelationshipAsync(instanceId, relationshipName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the relationship metadata for the provided instanceId and
            /// relationshipName, using input.
            /// </summary>
            /// <remarks>
            /// Updates the relationship metadata for the provided instanceId and
            /// relationshipName, using input.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='relationshipName'>
            /// Relationship name
            /// </param>
            /// <param name='body'>
            /// The updated relationship metadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateARelationshipAsync(this ICustomerInsights operations, string instanceId, string relationshipName, RelationshipMetadata body = default(RelationshipMetadata), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateARelationshipWithHttpMessagesAsync(instanceId, relationshipName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the search configuration for the instance.
            /// </summary>
            /// <remarks>
            /// Gets the search configuration for the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            public static object GetSearchConfiguration(this ICustomerInsights operations, string instanceId)
            {
                return operations.GetSearchConfigurationAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the search configuration for the instance.
            /// </summary>
            /// <remarks>
            /// Gets the search configuration for the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSearchConfigurationAsync(this ICustomerInsights operations, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchConfigurationWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the search configuration for the instance.
            /// </summary>
            /// <remarks>
            /// Updates the search configuration for the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='body'>
            /// The search configuration for the instance.
            /// </param>
            public static object UpdateSearchConfiguration(this ICustomerInsights operations, string instanceId, InstanceSearchConfiguration body = default(InstanceSearchConfiguration))
            {
                return operations.UpdateSearchConfigurationAsync(instanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the search configuration for the instance.
            /// </summary>
            /// <remarks>
            /// Updates the search configuration for the instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='body'>
            /// The search configuration for the instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateSearchConfigurationAsync(this ICustomerInsights operations, string instanceId, InstanceSearchConfiguration body = default(InstanceSearchConfiguration), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSearchConfigurationWithHttpMessagesAsync(instanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of segment metadata for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of segment metadata for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='includeHistoricStats'>
            /// Optional parameter to retrieve evaluation history of all the sgements in
            /// instanceId.
            /// </param>
            /// <param name='historicStatsDays'>
            /// Format - int32. Optional parameter to get number of days evaluation
            /// history.
            /// </param>
            public static object GetAllSegments(this ICustomerInsights operations, string instanceId, bool? includeHistoricStats = false, int? historicStatsDays = 10)
            {
                return operations.GetAllSegmentsAsync(instanceId, includeHistoricStats, historicStatsDays).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of segment metadata for the provided instanceId.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of segment metadata for the provided instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='includeHistoricStats'>
            /// Optional parameter to retrieve evaluation history of all the sgements in
            /// instanceId.
            /// </param>
            /// <param name='historicStatsDays'>
            /// Format - int32. Optional parameter to get number of days evaluation
            /// history.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllSegmentsAsync(this ICustomerInsights operations, string instanceId, bool? includeHistoricStats = false, int? historicStatsDays = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSegmentsWithHttpMessagesAsync(instanceId, includeHistoricStats, historicStatsDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new segment metadata with segmentMetadata on instanceId.
            /// </summary>
            /// <remarks>
            /// Create new segment metadata with segmentMetadata on instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='body'>
            /// New Segment metadata to be created
            /// </param>
            public static object CreateASegment(this ICustomerInsights operations, string instanceId, SegmentMetadata body = default(SegmentMetadata))
            {
                return operations.CreateASegmentAsync(instanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new segment metadata with segmentMetadata on instanceId.
            /// </summary>
            /// <remarks>
            /// Create new segment metadata with segmentMetadata on instanceId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='body'>
            /// New Segment metadata to be created
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateASegmentAsync(this ICustomerInsights operations, string instanceId, SegmentMetadata body = default(SegmentMetadata), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateASegmentWithHttpMessagesAsync(instanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activate segment on instanceId with segmentName.
            /// </summary>
            /// <remarks>
            /// Activate segment on instanceId with segmentName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            public static object ActivateSegment(this ICustomerInsights operations, string instanceId, string segmentName)
            {
                return operations.ActivateSegmentAsync(instanceId, segmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate segment on instanceId with segmentName.
            /// </summary>
            /// <remarks>
            /// Activate segment on instanceId with segmentName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActivateSegmentAsync(this ICustomerInsights operations, string instanceId, string segmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivateSegmentWithHttpMessagesAsync(instanceId, segmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivate segment on instanceId with segmentName.
            /// </summary>
            /// <remarks>
            /// Deactivate segment on instanceId with segmentName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            public static object DeactivateSegment(this ICustomerInsights operations, string instanceId, string segmentName)
            {
                return operations.DeactivateSegmentAsync(instanceId, segmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivate segment on instanceId with segmentName.
            /// </summary>
            /// <remarks>
            /// Deactivate segment on instanceId with segmentName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeactivateSegmentAsync(this ICustomerInsights operations, string instanceId, string segmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeactivateSegmentWithHttpMessagesAsync(instanceId, segmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates segment metadata for the provided instanceId and segmentName with
            /// segmentMetadata.
            /// </summary>
            /// <remarks>
            /// Updates segment metadata for the provided instanceId and segmentName with
            /// segmentMetadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            /// <param name='body'>
            /// New Segment metadata to be updated
            /// </param>
            public static object UpdateASegment(this ICustomerInsights operations, string instanceId, string segmentName, SegmentMetadata body = default(SegmentMetadata))
            {
                return operations.UpdateASegmentAsync(instanceId, segmentName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates segment metadata for the provided instanceId and segmentName with
            /// segmentMetadata.
            /// </summary>
            /// <remarks>
            /// Updates segment metadata for the provided instanceId and segmentName with
            /// segmentMetadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            /// <param name='body'>
            /// New Segment metadata to be updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateASegmentAsync(this ICustomerInsights operations, string instanceId, string segmentName, SegmentMetadata body = default(SegmentMetadata), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateASegmentWithHttpMessagesAsync(instanceId, segmentName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the segment metadata for the provided instanceId and segmentName.
            /// </summary>
            /// <remarks>
            /// Deletes the segment metadata for the provided instanceId and segmentName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            public static DeletionResponse DeleteSegment(this ICustomerInsights operations, string instanceId, string segmentName)
            {
                return operations.DeleteSegmentAsync(instanceId, segmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the segment metadata for the provided instanceId and segmentName.
            /// </summary>
            /// <remarks>
            /// Deletes the segment metadata for the provided instanceId and segmentName.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id
            /// </param>
            /// <param name='segmentName'>
            /// Unique name of a segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletionResponse> DeleteSegmentAsync(this ICustomerInsights operations, string instanceId, string segmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSegmentWithHttpMessagesAsync(instanceId, segmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve information about a workflow job. (Preview)
            /// </summary>
            /// <remarks>
            /// Retrieve information about a workflow job. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='jobId'>
            /// Format - uuid. The job id.
            /// </param>
            /// <param name='includeTasks'>
            /// Flag to include tasks or not.
            /// </param>
            public static object GetAWorkflowJobInformation(this ICustomerInsights operations, string instanceId, string workflowName, string jobId, bool? includeTasks = false)
            {
                return operations.GetAWorkflowJobInformationAsync(instanceId, workflowName, jobId, includeTasks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve information about a workflow job. (Preview)
            /// </summary>
            /// <remarks>
            /// Retrieve information about a workflow job. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='jobId'>
            /// Format - uuid. The job id.
            /// </param>
            /// <param name='includeTasks'>
            /// Flag to include tasks or not.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAWorkflowJobInformationAsync(this ICustomerInsights operations, string instanceId, string workflowName, string jobId, bool? includeTasks = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAWorkflowJobInformationWithHttpMessagesAsync(instanceId, workflowName, jobId, includeTasks, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a job. (Preview)
            /// </summary>
            /// <remarks>
            /// Cancel a job. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='jobId'>
            /// Format - uuid. The job id.
            /// </param>
            public static object CancelAWorkflowJob(this ICustomerInsights operations, string instanceId, string workflowName, string jobId)
            {
                return operations.CancelAWorkflowJobAsync(instanceId, workflowName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a job. (Preview)
            /// </summary>
            /// <remarks>
            /// Cancel a job. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='jobId'>
            /// Format - uuid. The job id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelAWorkflowJobAsync(this ICustomerInsights operations, string instanceId, string workflowName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAWorkflowJobWithHttpMessagesAsync(instanceId, workflowName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of recent job information. (Preview)
            /// </summary>
            /// <remarks>
            /// Retrieves a list of recent job information. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='top'>
            /// Format - int32. The number of job informations to retrieve.
            /// </param>
            /// <param name='includeTasks'>
            /// Flag to include tasks or not.
            /// </param>
            public static object GetListOfRecentWorkflowJobs(this ICustomerInsights operations, string instanceId, string workflowName, int? top = 10, bool? includeTasks = false)
            {
                return operations.GetListOfRecentWorkflowJobsAsync(instanceId, workflowName, top, includeTasks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of recent job information. (Preview)
            /// </summary>
            /// <remarks>
            /// Retrieves a list of recent job information. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='top'>
            /// Format - int32. The number of job informations to retrieve.
            /// </param>
            /// <param name='includeTasks'>
            /// Flag to include tasks or not.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetListOfRecentWorkflowJobsAsync(this ICustomerInsights operations, string instanceId, string workflowName, int? top = 10, bool? includeTasks = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfRecentWorkflowJobsWithHttpMessagesAsync(instanceId, workflowName, top, includeTasks, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a workflow of OperationTypeoperationType for the instance specified
            /// in instanceId.
            /// Optionally takes a list of identifiers, only if operationType is not
            /// OperationType.All and a flag
            /// forceRunRequested indicating whether to force run. (Preview)
            /// </summary>
            /// <remarks>
            /// Submits a workflow of OperationTypeoperationType for the instance specified
            /// in instanceId.
            /// Optionally takes a list of identifiers, only if operationType is not
            /// OperationType.All and a flag
            /// forceRunRequested indicating whether to force run. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The Customer Insights instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The workflow name.
            /// </param>
            /// <param name='body'>
            /// Job Creation Request.
            /// </param>
            /// <param name='operationType'>
            /// The workflow operation type.
            /// </param>
            /// <param name='identifiers'>
            /// A list of workflow identifiers.
            /// </param>
            /// <param name='forceRunRequested'>
            /// Whether to request a force run.
            /// </param>
            public static object SubmitAWorkflowJob(this ICustomerInsights operations, string instanceId, string workflowName, OnDemandJobRequest body = default(OnDemandJobRequest), string operationType = default(string), IList<string> identifiers = default(IList<string>), bool? forceRunRequested = false)
            {
                return operations.SubmitAWorkflowJobAsync(instanceId, workflowName, body, operationType, identifiers, forceRunRequested).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a workflow of OperationTypeoperationType for the instance specified
            /// in instanceId.
            /// Optionally takes a list of identifiers, only if operationType is not
            /// OperationType.All and a flag
            /// forceRunRequested indicating whether to force run. (Preview)
            /// </summary>
            /// <remarks>
            /// Submits a workflow of OperationTypeoperationType for the instance specified
            /// in instanceId.
            /// Optionally takes a list of identifiers, only if operationType is not
            /// OperationType.All and a flag
            /// forceRunRequested indicating whether to force run. (Preview)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The Customer Insights instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The workflow name.
            /// </param>
            /// <param name='body'>
            /// Job Creation Request.
            /// </param>
            /// <param name='operationType'>
            /// The workflow operation type.
            /// </param>
            /// <param name='identifiers'>
            /// A list of workflow identifiers.
            /// </param>
            /// <param name='forceRunRequested'>
            /// Whether to request a force run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SubmitAWorkflowJobAsync(this ICustomerInsights operations, string instanceId, string workflowName, OnDemandJobRequest body = default(OnDemandJobRequest), string operationType = default(string), IList<string> identifiers = default(IList<string>), bool? forceRunRequested = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubmitAWorkflowJobWithHttpMessagesAsync(instanceId, workflowName, body, operationType, identifiers, forceRunRequested, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of historic task information for a workflow.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of historic task information for a workflow.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='top'>
            /// Format - int32. The number of task informations to retrieve.
            /// </param>
            public static object GetListOfWorkflowTaskInformationHistory(this ICustomerInsights operations, string instanceId, string workflowName, int? top = 10)
            {
                return operations.GetListOfWorkflowTaskInformationHistoryAsync(instanceId, workflowName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of historic task information for a workflow.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of historic task information for a workflow.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The name of the workflow.
            /// </param>
            /// <param name='top'>
            /// Format - int32. The number of task informations to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetListOfWorkflowTaskInformationHistoryAsync(this ICustomerInsights operations, string instanceId, string workflowName, int? top = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfWorkflowTaskInformationHistoryWithHttpMessagesAsync(instanceId, workflowName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current status for a workflow.
            /// </summary>
            /// <remarks>
            /// Gets the current status for a workflow.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The workflow name.
            /// </param>
            public static object GetWorkflowStatus(this ICustomerInsights operations, string instanceId, string workflowName)
            {
                return operations.GetWorkflowStatusAsync(instanceId, workflowName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current status for a workflow.
            /// </summary>
            /// <remarks>
            /// Gets the current status for a workflow.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// The workflow name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWorkflowStatusAsync(this ICustomerInsights operations, string instanceId, string workflowName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkflowStatusWithHttpMessagesAsync(instanceId, workflowName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported timezones for creating workflow schedules.
            /// </summary>
            /// <remarks>
            /// Gets a list of supported timezones for creating workflow schedules.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workflowName'>
            /// Any workflow name.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            public static object GetSupportedTimezones(this ICustomerInsights operations, string workflowName, string instanceId)
            {
                return operations.GetSupportedTimezonesAsync(workflowName, instanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported timezones for creating workflow schedules.
            /// </summary>
            /// <remarks>
            /// Gets a list of supported timezones for creating workflow schedules.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workflowName'>
            /// Any workflow name.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedTimezonesAsync(this ICustomerInsights operations, string workflowName, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedTimezonesWithHttpMessagesAsync(workflowName, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all workflow refresh schedules.
            /// </summary>
            /// <remarks>
            /// Gets all workflow refresh schedules.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// Any workflow name.
            /// </param>
            public static object GetWorkflowSchedules(this ICustomerInsights operations, string instanceId, string workflowName)
            {
                return operations.GetWorkflowSchedulesAsync(instanceId, workflowName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all workflow refresh schedules.
            /// </summary>
            /// <remarks>
            /// Gets all workflow refresh schedules.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// Any workflow name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWorkflowSchedulesAsync(this ICustomerInsights operations, string instanceId, string workflowName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkflowSchedulesWithHttpMessagesAsync(instanceId, workflowName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a workflow refresh schedule.
            /// </summary>
            /// <remarks>
            /// Create a workflow refresh schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// Any workflow name.
            /// </param>
            /// <param name='body'>
            /// A schedule object to create.
            /// </param>
            public static object CreateWorkflowRefreshSchedule(this ICustomerInsights operations, string instanceId, string workflowName, WorkflowRefreshSchedule body = default(WorkflowRefreshSchedule))
            {
                return operations.CreateWorkflowRefreshScheduleAsync(instanceId, workflowName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a workflow refresh schedule.
            /// </summary>
            /// <remarks>
            /// Create a workflow refresh schedule.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. The instance id.
            /// </param>
            /// <param name='workflowName'>
            /// Any workflow name.
            /// </param>
            /// <param name='body'>
            /// A schedule object to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateWorkflowRefreshScheduleAsync(this ICustomerInsights operations, string instanceId, string workflowName, WorkflowRefreshSchedule body = default(WorkflowRefreshSchedule), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWorkflowRefreshScheduleWithHttpMessagesAsync(instanceId, workflowName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the entityProfile for the entity.
            /// </summary>
            /// <remarks>
            /// Gets the entityProfile for the entity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='qualifiedEntityName'>
            /// Qualified Entity Name.
            /// </param>
            public static EntityDataProfile GetAnEntityProfile(this ICustomerInsights operations, string instanceId, string qualifiedEntityName)
            {
                return operations.GetAnEntityProfileAsync(instanceId, qualifiedEntityName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the entityProfile for the entity.
            /// </summary>
            /// <remarks>
            /// Gets the entityProfile for the entity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// Format - uuid. Customer Insights instance id.
            /// </param>
            /// <param name='qualifiedEntityName'>
            /// Qualified Entity Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityDataProfile> GetAnEntityProfileAsync(this ICustomerInsights operations, string instanceId, string qualifiedEntityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAnEntityProfileWithHttpMessagesAsync(instanceId, qualifiedEntityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
