/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

export interface ApiError {
  /**
   * Possible values include: 'notFound', 'ambiguousReference', 'malformedInput',
   * 'serviceUnavailable', 'badRequest', 'notAllowed', 'conflict', 'locked', 'forbidden'
  */
  errorCode?: string;
  message?: string;
}

/**
 * A value and the count of that value.
*/
export interface ValueCount {
  /**
   * Gets or sets the value.
  */
  value?: any;
  /**
   * Gets or sets the count of the value.
  */
  count?: number;
}

/**
 * Histogram bin.
*/
export interface HistogramBin {
  /**
   * Gets or sets the lower bound.
  */
  lowerBound?: number;
  /**
   * Gets or sets the upper bound.
  */
  upperBound?: number;
  /**
   * Gets or sets the count.
  */
  count?: number;
}

export interface StringLengthCount {
  /**
   * Gets or sets the string length.
  */
  length?: number;
  /**
   * Gets or sets the count of string values with the Length.
  */
  count?: number;
}

/**
 * Numerical quantiles.
*/
export interface Quantiles {
  /**
   * Gets or sets the 1% quantile.
  */
  p0D1?: number;
  /**
   * Gets or sets the 1% quantile.
  */
  p1?: number;
  /**
   * Gets or sets the 5% quantile.
  */
  p5?: number;
  /**
   * Gets or sets the 25% quantile.
  */
  p25?: number;
  /**
   * Gets or sets the 50% quantile.
  */
  p50?: number;
  /**
   * Gets or sets the 75% quantile.
  */
  p75?: number;
  /**
   * Gets or sets the 95% quantile.
  */
  p95?: number;
  /**
   * Gets or sets the 99% quantile.
  */
  p99?: number;
  /**
   * Gets or sets the 9% quantile.
  */
  p99D9?: number;
}

/**
 * Statistical moments.
*/
export interface Moments {
  /**
   * Gets or sets the mean.
  */
  mean?: number;
  /**
   * Gets or sets the standard deviation.
  */
  standardDeviation?: number;
  /**
   * Gets or sets the variance.
  */
  variance?: number;
  /**
   * Gets or sets the skewness.
  */
  skewness?: number;
  /**
   * Gets or sets the kurtosis.
  */
  kurtosis?: number;
}

export interface AttributeDataProfile {
  /**
   * Gets or sets the distribution of the top 100 values
  */
  valueCounts?: ValueCount[];
  /**
   * Gets or sets the histogram information. Ordered from smallest to largest bin.
  */
  histogram?: HistogramBin[];
  /**
   * Gets or sets the string lengths and the count of string values with those lengths.
  */
  stringLengthCounts?: StringLengthCount[];
  /**
   * Gets or sets the qualified entity name
  */
  qualifiedEntityName?: string;
  /**
   * Gets or sets the attribute name.
  */
  attributeName?: string;
  /**
   * Gets or sets the minimum value.
  */
  min?: any;
  /**
   * Gets or sets the maximum value.
  */
  max?: any;
  /**
   * Gets or sets the total row count.
  */
  count?: number;
  /**
   * Gets or sets the row count of missing values.
  */
  missingCount?: number;
  /**
   * Gets or sets the number of error values.
  */
  errorCount?: number;
  quantiles?: Quantiles;
  moments?: Moments;
  /**
   * Gets or sets the number of unique values.
  */
  uniqueValueCount?: number;
  /**
   * Gets or sets the profiling date
  */
  profilingDate?: Date;
  /**
   * Gets a value indicating whether this attribute can be used as a primary key of the entity
  */
  readonly isSuggestedPrimaryKey?: boolean;
}

/**
 * Represents the semantic info used in API requests (attribute level)
*/
export interface AttributeSemanticInformation {
  /**
   * Gets the name of the attribute.
  */
  attributeName?: string;
  /**
   * Possible values include: 'CalendarDate', 'CalendarDayOfMonth', 'CalendarDayOfWeek',
   * 'CalendarDayOfYear', 'CalendarHalfYear', 'CalendarMonthOfYear', 'CalendarMonth',
   * 'CalendarWeek', 'CalendarYear', 'CalendarFiscalDate', 'CalendarFiscalDayOfMonth',
   * 'CalendarFiscalDayOfWeek', 'CalendarFiscalDayOfYear', 'CalendarFiscalHalfYear',
   * 'CalendarFiscalMonthOfYear', 'CalendarFiscalMonth', 'CalendarFiscalQuarter',
   * 'CalendarFiscalWeekOfMonth', 'CalendarFiscalWeekOfYear', 'CalendarFiscalWeek',
   * 'CalendarFiscalYear', 'Account', 'Channel', 'Contact', 'Customer', 'Language', 'Organization',
   * 'OrganizationUnit', 'Person', 'Product', 'ProductGroup', 'LocationAddress',
   * 'LocationAddressStreet', 'LocationCity', 'LocationContinent', 'LocationCountry',
   * 'LocationCounty', 'LocationLatitude', 'LocationLongitude', 'LocationPoint',
   * 'LocationPostalCode', 'LocationProvince', 'LocationRegion', 'LocationState',
   * 'LocationTimezone', 'MeasurementDateCreation', 'MeasurementDateModify', 'MeasurementStatus',
   * 'MeasurementVersion', 'BarCode', 'Brand', 'IdentityGovernmentID', 'PersonFirstName',
   * 'PersonFullName', 'PersonLastName', 'PersonMiddleName', 'IdentityServiceEmail',
   * 'IdentityServiceFacebook', 'IdentityServicePhone', 'IdentityServiceTwitter', 'Image', 'Place',
   * 'ReferenceDescription', 'ReferenceImageURL', 'ReferencePhonetic', 'ReferenceURL'
  */
  label?: string;
}

/**
 * Represents the entity info used in API requests (entity level)
*/
export interface DatasourceEntityInformation {
  /**
   * Gets the name of the entity.
  */
  entityName?: string;
  /**
   * Gets the primary key name of the entity. We require the entity to have a single column primary
   * key column
  */
  primaryKey?: string;
  /**
   * Possible values include: 'unspecified', 'profile', 'conflationMap', 'activity',
   * 'aggregateKpi', 'profileKpi', 'unifiedActivity', 'segment', 'intelligence',
   * 'genericPrediction', 'enrichment', 'insights', 'derivedEntity', 'quarantine'
  */
  entityType?: string;
  /**
   * Gets the time stamp field name.
  */
  timestampFieldName?: string;
  /**
   * Gets the semantic labels, by attribute name.
  */
  semanticLabels?: AttributeSemanticInformation[];
}

/**
 * Represents a Incremental Refresh Property.
*/
export interface IncrementalRefreshProperties {
  /**
   * Gets the name of the entity.
  */
  entityName?: string;
  /**
   * Gets the column to detect changes.
  */
  detectChangesAttributeName?: string;
  /**
   * Gets the column to get incremental data.
  */
  filterByAttributeName?: string;
  /**
   * Gets the granularity of the incremental refresh.
  */
  incrementalGranularity?: string;
  /**
   * Gets the incremental period.
  */
  incrementalPeriods?: number;
  /**
   * Gets a value indicating whether to refresh completed periods or not.
  */
  refreshCompletePeriods?: boolean;
  /**
   * Gets the off set period.
  */
  incrementalPeriodsOffset?: number;
  /**
   * Gets the primary key of the entity.
  */
  primaryKeyAttributeName?: string;
  /**
   * Gets the rolling window granularity.
  */
  rollingWindowGranularity?: string;
  /**
   * Gets the Rolling window period.
  */
  rollingWindowPeriods?: number;
}

/**
 * Represents metadata for a Customer Insights data source.
*/
export interface DataSourceMetadata {
  /**
   * Possible values include: 'salesforce', 'dynamics365', 'powerQuery', 'attachCdm', 'attachCds',
   * 'powerPlatform', 'datahub'
  */
  kind?: string;
  readonly isActive?: boolean;
  readonly entityNames?: string[];
  /**
   * Gets the unique identity for this object.
  */
  readonly dataSourceId?: string;
  /**
   * Gets the unique name of the dataSource.
  */
  readonly name?: string;
  /**
   * Gets the friendlyName of the dataSource.
  */
  readonly friendlyName?: string;
  /**
   * Gets the entity information, by entity name.
  */
  readonly entityInformation?: DatasourceEntityInformation[];
  /**
   * Possible values include: 'new', 'creating', 'active', 'createFailed', 'updateFailed',
   * 'deleting', 'refreshCredentials', 'resetInstanceInProgress'
  */
  provisioningState?: string;
  /**
   * Gets the time datasource was last refreshed.
  */
  readonly lastRefresh?: Date;
  /**
   * Possible values include: 'notUpdated', 'updated', 'updating', 'updateFailed',
   * 'updateCancelled'
  */
  refreshState?: string;
  /**
   * Gets the Incremental refresh properties for entities.
  */
  readonly incrementalRefreshProperties?: IncrementalRefreshProperties[];
  /**
   * Gets the model path for CDM data source.
  */
  readonly modelJsonPath?: string;
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

export interface QueryMetadata {
  queryId?: string;
  queryName?: string;
  queryGroupId?: string;
  entityName?: string;
  loadEnabled?: boolean;
}

export interface Mashup {
  fastCombine?: boolean;
  allowNativeQueries?: boolean;
  queriesMetadata?: { [propertyName: string]: QueryMetadata };
  document?: string;
}

export interface Annotation {
  name?: string;
  value?: string;
}

export interface Entity {
  name?: string;
  description?: string;
  isHidden?: boolean;
  readonly annotations?: Annotation[];
}

export interface Relationship {
  name?: string;
  description?: string;
  readonly annotations?: Annotation[];
}

export interface ReferenceModel {
  id?: string;
  location?: string;
}

export interface Model {
  name?: string;
  description?: string;
  isHidden?: boolean;
  version?: string;
  culture?: string;
  pbitimeZone?: string;
  modifiedTime?: Date;
  pbimashup?: Mashup;
  readonly annotations?: Annotation[];
  readonly entities?: Entity[];
  readonly relationships?: Relationship[];
  readonly referenceModels?: ReferenceModel[];
}

export interface DataSourceInfo {
  dataSourceMetadata?: DataSourceMetadata;
  model?: Model;
}

export interface CIResult {
  /**
   * Possible values include: 'system', 'user', 'external'
  */
  exceptionCulprit?: string;
  errorCode?: string;
  /**
   * Possible values include: 'error', 'warning'
  */
  resultSeverity?: string;
  message?: string;
  params?: { [propertyName: string]: any };
  ciResults?: CIResult[];
}

/**
 * Api Error response class (DTO)
*/
export interface ApiErrorResult {
  readonly exception?: any;
  httpStatusCode?: string;
  /**
   * Possible values include: 'system', 'user', 'external'
  */
  exceptionCulprit?: string;
  errorCode?: string;
  /**
   * Possible values include: 'error', 'warning'
  */
  resultSeverity?: string;
  message?: string;
  params?: { [propertyName: string]: any };
  ciResults?: CIResult[];
}

export interface OkResult {
  statusCode?: number;
}

export interface ODataErrorDetail {
  errorCode?: string;
  message?: string;
  target?: string;
}

export interface ODataTypeAnnotation {
  typeName?: string;
}

export interface ODataValue {
  typeAnnotation?: ODataTypeAnnotation;
}

export interface ODataInnerError {
  properties?: { [propertyName: string]: ODataValue };
  message?: string;
  typeName?: string;
  stackTrace?: string;
  innerError?: ODataInnerError;
}

export interface ODataInstanceAnnotation {
  name?: string;
  value?: ODataValue;
  typeAnnotation?: ODataTypeAnnotation;
}

export interface ODataError {
  errorCode?: string;
  message?: string;
  target?: string;
  details?: ODataErrorDetail[];
  innerError?: ODataInnerError;
  instanceAnnotations?: ODataInstanceAnnotation[];
  typeAnnotation?: ODataTypeAnnotation;
}

export interface CreatedResult {
  location?: string;
  value?: any;
  formatters?: any[];
  contentTypes?: string[];
  declaredType?: string;
  statusCode?: number;
}

export interface AcceptedResult {
  location?: string;
  value?: any;
  formatters?: any[];
  contentTypes?: string[];
  declaredType?: string;
  statusCode?: number;
}

export interface NoContentResult {
  statusCode?: number;
}

export interface ODataEntityPayload {
  odatacontext?: string;
  odatacount?: number;
  value?: any[];
}

export interface IEdmType {
  /**
   * Possible values include: 'none', 'primitive', 'entity', 'complex', 'collection',
   * 'entityReference', 'enum', 'typeDefinition', 'untyped', 'path'
  */
  typeKind?: string;
}

/**
 * Represents a property type backed by an EDM type and a CLR type. Enables conversion of values
 * from strings, as
 * well as various other type-based operations.
*/
export interface AttributeType {
  /**
   * Gets the CLR Type for this property type.
  */
  readonly clrType?: string;
  /**
   * Possible values include: 'unclassified', 'string', 'int64', 'double', 'dateTime',
   * 'dateTimeOffset', 'decimal', 'boolean', 'guid', 'json'
  */
  cdsaType?: string;
  /**
   * Gets the EDM type name for the property type, in the format EdmTypeKind>".
  */
  readonly edmTypeName?: string;
  readonly isBoolean?: boolean;
  readonly isDateTime?: boolean;
  readonly isDecimal?: boolean;
  readonly isNumber?: boolean;
  /**
   * Gets a value indicating whether this type valid and supported by the runtime.
  */
  readonly isValidType?: boolean;
  /**
   * Gets the name of the property type. Will default to the EdmTypeName but may be overridden by a
   * property
   * type.
  */
  readonly name?: string;
  equalityComparer?: any;
  comparer?: any;
  oDataType?: IEdmType;
  readonly isCollection?: boolean;
}

export interface IAttributeSearchProperties {
  /**
   * Gets a value indicating whether the attribute supports full text search.
  */
  readonly isSearchable?: boolean;
  /**
   * Gets a value indicating whether the attribute supports filtering.
  */
  readonly isFilterable?: boolean;
  /**
   * Gets a value indicating whether the attribute can be included as facet results.
  */
  readonly isFacetable?: boolean;
  /**
   * Gets a value indicating whether the attribute can be included in orderby directives.
  */
  readonly isSortable?: boolean;
  /**
   * Gets an optional specification for search faceting used at query time (advanced).
   * this is the part behind the comma in the examples below.
   * bucket facet: "price,interval:10"
   * other type: "listPrice,values:10|25|100|500|1000|2500"
   * value facet: city,count:5
  */
  readonly facetSpecification?: string;
}

export interface IAttributeMetadata {
  readonly name?: string;
  readonly friendlyName?: string;
  readonly baseName?: string;
  dataType?: AttributeType;
  /**
   * Possible values include: 'CalendarDate', 'CalendarDayOfMonth', 'CalendarDayOfWeek',
   * 'CalendarDayOfYear', 'CalendarHalfYear', 'CalendarMonthOfYear', 'CalendarMonth',
   * 'CalendarWeek', 'CalendarYear', 'CalendarFiscalDate', 'CalendarFiscalDayOfMonth',
   * 'CalendarFiscalDayOfWeek', 'CalendarFiscalDayOfYear', 'CalendarFiscalHalfYear',
   * 'CalendarFiscalMonthOfYear', 'CalendarFiscalMonth', 'CalendarFiscalQuarter',
   * 'CalendarFiscalWeekOfMonth', 'CalendarFiscalWeekOfYear', 'CalendarFiscalWeek',
   * 'CalendarFiscalYear', 'Account', 'Channel', 'Contact', 'Customer', 'Language', 'Organization',
   * 'OrganizationUnit', 'Person', 'Product', 'ProductGroup', 'LocationAddress',
   * 'LocationAddressStreet', 'LocationCity', 'LocationContinent', 'LocationCountry',
   * 'LocationCounty', 'LocationLatitude', 'LocationLongitude', 'LocationPoint',
   * 'LocationPostalCode', 'LocationProvince', 'LocationRegion', 'LocationState',
   * 'LocationTimezone', 'MeasurementDateCreation', 'MeasurementDateModify', 'MeasurementStatus',
   * 'MeasurementVersion', 'BarCode', 'Brand', 'IdentityGovernmentID', 'PersonFirstName',
   * 'PersonFullName', 'PersonLastName', 'PersonMiddleName', 'IdentityServiceEmail',
   * 'IdentityServiceFacebook', 'IdentityServicePhone', 'IdentityServiceTwitter', 'Image', 'Place',
   * 'ReferenceDescription', 'ReferenceImageURL', 'ReferencePhonetic', 'ReferenceURL'
  */
  semanticType?: string;
  searchProperties?: IAttributeSearchProperties;
}

/**
 * Represents a DCI entity data partition
*/
export interface PartitionMetadata {
  /**
   * Gets the name of the data partition
  */
  name?: string;
  /**
   * Gets the uri location of the data
  */
  location?: string;
  /**
   * Gets the refresh time of the data partition
  */
  refreshTime?: Date;
  fileFormatSettings?: any;
  readonly hasHeader?: boolean;
}

export interface IEntityMetadata {
  /**
   * Gets the name of the entity. eg: Contact.
  */
  readonly name?: string;
  /**
   * Gets the unqiue logical name for the entity
   * If entity is from a datasource, QualifiedEntityName = datasourceId_EntityName eg:
   * d8d3b26a-a8ad-42f7-901e-f7f745003a84_Contact.
   * If entity is generated by C360, QualifiedEntityName = EntityName eg: Contact.
  */
  readonly qualifiedEntityName?: string;
  /**
   * Gets the datasource name of this entity, if no data source, return null or emptyString
  */
  readonly dataSourceName?: string;
  /**
   * Possible values include: 'dynamics365', 'salesforce', 'conflationSortAndRefine',
   * 'conflationDeduplication', 'conflationMatchPairs', 'conflationResolveConflicts', 'enriched',
   * 'kpi', 'powerQuery', 'dataPreparation', 'intelligence', 'unifiedActivity', 'segmentation',
   * 'ingestion', 'attachCdm', 'genericPrediction', 'attachCds', 'unknown', 'powerPlatform',
   * 'powerPlatformSource', 'datahub', 'insights', 'derivedEntity'
  */
  dataflowType?: string;
  /**
   * Gets the original datasourceid of this entity, if no data source, return null or emptyString
  */
  readonly datasourceId?: string;
  /**
   * Possible values include: 'unspecified', 'profile', 'conflationMap', 'activity',
   * 'aggregateKpi', 'profileKpi', 'unifiedActivity', 'segment', 'intelligence',
   * 'genericPrediction', 'enrichment', 'insights', 'derivedEntity', 'quarantine'
  */
  entityType?: string;
  /**
   * Gets entity attributes.
  */
  readonly attributes?: IAttributeMetadata[];
  /**
   * Gets the keys of the entity.
  */
  readonly keys?: IAttributeMetadata[][];
  /**
   * Gets entity relationships.
  */
  readonly relationships?: IRelationshipMetadata[];
  timestampAttribute?: IAttributeMetadata;
  incrementalAttribute?: IAttributeMetadata;
  /**
   * Possible values include: 'Account', 'AccountLeads', 'ActivityParty', 'ActivityPointer',
   * 'Annotation', 'Appointment', 'BusinessUnit', 'Campaign', 'CampaignActivity', 'CampaignItem',
   * 'CampaignResponse', 'Characteristic', 'Competitor', 'CompetitorAddress', 'CompetitorProduct',
   * 'Connection', 'ConnectionRole', 'Contact', 'Contract', 'ContractDetail', 'Customer',
   * 'CustomerAddress', 'CustomerRelationship', 'Discount', 'DiscountType', 'Email', 'Entitlement',
   * 'Equipment', 'Fax', 'Feedback', 'Goal', 'Incident', 'Invoice', 'InvoiceDetail', 'KbArticle',
   * 'KnowledgeArticle', 'Lead', 'LeadAddress', 'Letter', 'Metric', 'Opportunity', 'Organization',
   * 'Owner', 'PhoneCall', 'Position', 'PriceLevel', 'Product', 'Quote', 'RatingModel', 'Resource',
   * 'ResourceGroup', 'SalesLiterature', 'SalesOrder', 'Service', 'ServiceAppointment', 'Site',
   * 'SLA', 'SocialActivity', 'SocialProfile', 'SystemUser', 'Task', 'Team', 'Territory', 'UoM'
  */
  semanticType?: string;
  /**
   * Gets last refresh time for entity.
  */
  readonly refreshTime?: Date;
  /**
   * Gets entity data partitions.
  */
  readonly partitions?: PartitionMetadata[];
  /**
   * Gets entity incremental upsert data partitions.
  */
  readonly incrementalUpsertPartitions?: PartitionMetadata[];
  /**
   * Gets entity incremental delete data partitions.
  */
  readonly incrementalDeletePartitions?: PartitionMetadata[];
  /**
   * Gets entity data parquet partitions.
  */
  readonly fullPartitionsParquet?: PartitionMetadata[];
  /**
   * Gets entity incremental upsert data parquet partitions.
  */
  readonly incrementalUpsertPartitionsParquet?: PartitionMetadata[];
  /**
   * Gets entity incremental delete data parquet partitions.
  */
  readonly incrementalDeletePartitionsParquet?: PartitionMetadata[];
  /**
   * Gets base entity name
  */
  readonly annotations?: Annotation[];
}

export interface IRelationshipMetadata {
  readonly name?: string;
  readonly friendlyName?: string;
  fromAttribute?: IAttributeMetadata;
  toAttribute?: IAttributeMetadata;
  /**
   * Possible values include: 'singleKeyRelationshipOrigin', 'singleKeyRelationshipDestination',
   * 'dataSourceLineageOrigin', 'dataSourceLineageDestination'
  */
  relationshipType?: string;
  dataSourceEntity?: IEntityMetadata;
  readonly dataSourceMappingAttributes?: IAttributeMetadata[];
}

export interface IC360EntityModel {
  /**
   * Gets the instance ID associated with the model.
  */
  readonly instanceId?: string;
  /**
   * Gets the dataflow ID associated with the model.
  */
  readonly dataflowId?: string;
  /**
   * Gets the datasource ID associated with the model.
  */
  readonly datasourceId?: string;
  /**
   * Possible values include: 'dynamics365', 'salesforce', 'conflationSortAndRefine',
   * 'conflationDeduplication', 'conflationMatchPairs', 'conflationResolveConflicts', 'enriched',
   * 'kpi', 'powerQuery', 'dataPreparation', 'intelligence', 'unifiedActivity', 'segmentation',
   * 'ingestion', 'attachCdm', 'genericPrediction', 'attachCds', 'unknown', 'powerPlatform',
   * 'powerPlatformSource', 'datahub', 'insights', 'derivedEntity'
  */
  dataflowType?: string;
  /**
   * Gets entities in the model.
  */
  readonly entities?: IEntityMetadata[];
}

/**
 * The information about an entity size
*/
export interface EntitySize {
  /**
   * Gets the entity Name
  */
  qualifiedEntityName?: string;
  /**
   * Gets the size of the entire entity (in Bytes)
  */
  size?: number;
  /**
   * Gets the row count of the entity
  */
  rowCount?: number;
}

/**
 * Represents an instance
*/
export interface InstanceInfo {
  /**
   * Gets the unique ID for this instance.
  */
  instanceId?: string;
  /**
   * Gets the instance name. (not persisted in store)
  */
  name?: string;
  /**
   * Possible values include: 'trial', 'sandbox', 'production'
  */
  instanceType?: string;
  /**
   * Gets the time the instance is set to expire. (not persisted in store)
  */
  expiryTimeUtc?: Date;
}

/**
 * Represents a embedded PowerBI report
*/
export interface EmbeddedReport {
  /**
   * Possible values include: 'overview', 'sales', 'marketing', 'service', 'instanceZero'
  */
  reportType?: string;
  /**
   * Gets the Uri used for Power BI report embedding.
  */
  embedUrl?: string;
  /**
   * Gets the id used for Power BI report embedding.
  */
  reportId?: string;
}

/**
 * Represents an instance provisioning error
*/
export interface InstanceProvisioningError {
  /**
   * Possible values include: 'invalidDynamics365DataSourceCredentials',
   * 'invalidSalesforceDataSourceCredentials', 'internalError', 'bapCannotCreateEnvironment'
  */
  errorCode?: string;
  /**
   * Gets string formatting arguments for the provisioning error
  */
  errorArgs?: string[];
}

/**
 * Represents the status of a provisioning operation
*/
export interface ProvisioningStatus {
  /**
   * Gets the total number of steps in the provisioning operation.
  */
  totalSteps?: number;
  /**
   * Gets the current step in the provisioning operation.
  */
  currentStep?: number;
  /**
   * Possible values include: 'starting', 'creating', 'loadingData', 'completed'
  */
  currentOperation?: string;
  /**
   * Gets the instance created time.
  */
  createdTimeUtc?: Date;
  /**
   * Gets the instance last updated time.
  */
  lastUpdatedTimeUtc?: Date;
  /**
   * Gets a list of provisioning errors.
  */
  errors?: InstanceProvisioningError[];
}

/**
 * Represents a email subscription for the instance
*/
export interface EmailSubscriptionMetadata {
  /**
   * Possible values include: 'finishData'
  */
  emailSubscription?: string;
  /**
   * Gets the email for the subscription.
  */
  email?: string;
  /**
   * Gets the current status for the subscription.
  */
  status?: string;
}

/**
 * Represents a refresh schedule for the state machine
*/
export interface DataRefreshSchedule {
  /**
   * Gets a value indicating whether the schedule is active.
  */
  readonly isActive?: boolean;
  /**
   * Gets the ID of the timezone
  */
  readonly timezoneId?: string;
  /**
   * Gets the schedule in CRON format
  */
  readonly cronSchedules?: string[];
  /**
   * Gets the ID of the schedule
  */
  readonly scheduleId?: string;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

/**
 * The information for a trial instance
*/
export interface TrialInfo {
  /**
   * Gets the list of section were helped is disabled
  */
  helpSectionsVisited?: string[];
  /**
   * Gets a value indicating whether the initial ingestion has completed
  */
  hasCompletedInitialIngestion?: boolean;
  /**
   * Gets a value indicating whether the trial environment is activated or not
  */
  trialActivated?: boolean;
}

/**
 * The information for CDS Organization in BAP
*/
export interface CdsOrgInfo {
  /**
   * Gets the Cds Organization Friendly Name
  */
  friendlyName?: string;
  /**
   * Gets the Cds Organization Url
  */
  url?: string;
  /**
   * Gets the Cds Organization State
  */
  state?: string;
}

/**
 * The information for workspace in CDS
*/
export interface WorkSpaceDetail {
  /**
   * Gets the Workspace Friendly Name
  */
  name?: string;
  /**
   * Gets the Cds workspace unique Name
  */
  uniqueName?: string;
}

/**
 * The information on CDS MDL workspaces
*/
export interface CdsMdlInfo {
  privateWorkSpace?: WorkSpaceDetail;
  publicWorkSpace?: WorkSpaceDetail;
}

/**
 * The instance metadata.
*/
export interface InstanceMetadata {
  /**
   * Gets the user defined instance name.
  */
  name?: string;
  /**
   * Possible values include: 'new', 'creating', 'active', 'createFailed', 'updateFailed',
   * 'deleting', 'refreshCredentials', 'resetInstanceInProgress'
  */
  provisioningState?: string;
  /**
   * Possible values include: 'trial', 'sandbox', 'production'
  */
  instanceType?: string;
  refreshSchedule?: DataRefreshSchedule;
  /**
   * Gets the time the instance is set to expire.
  */
  expiryTimeUtc?: Date;
  /**
   * Gets the Azure region where the instance lives.
  */
  region?: string;
  cdsOrgInfo?: CdsOrgInfo;
  cdsMdlInfo?: CdsMdlInfo;
  /**
   * Gets the total number of extensions allowed if this is trial instance
  */
  maxTrialExtensionsAllowed?: number;
  /**
   * Stores the details of trial extensions done if this is a trial instance
  */
  trialExtensionHistory?: string;
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

/**
 * Represents a Resource metadata
*/
export interface ResourceMetadata {
  /**
   * Possible values include: 'bearerAuthenticationConnection', 'sshKeyAuthenticationConnection',
   * 'apiKeyAuthenticationConnection', 'basicAuthenticationConnection', 'adlsGen2', 'd365Sales',
   * 'd365Marketing', 'attachCds', 'ftp', 'facebookAds', 'http', 'mailchimp', 'googleAds'
  */
  kind?: string;
  /**
   * Gets the Id of the resource.
  */
  readonly resourceId?: string;
  /**
   * Gets the Id of the operation being performed on the resource.
  */
  readonly operationId?: string;
  /**
   * Possible values include: 'adlsGen2', 'd365Sales', 'cds', 'ftp',
   * 'bearerAuthenticationConnection', 'sshKeyAuthenticationConnection',
   * 'apiKeyAuthenticationConnection', 'basicAuthenticationConnection', 'facebookAds', 'http',
   * 'mailchimp', 'googleAds'
  */
  resourceType?: string;
  /**
   * Gets the Name of the resource.
  */
  readonly name?: string;
  /**
   * Gets the Description of the resource.
  */
  readonly description?: string;
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

export interface InstanceCreationRequest {
  instanceMetadata?: InstanceMetadata;
  byosaResourceMetadata?: ResourceMetadata;
  cdsResourceMetadata?: ResourceMetadata;
  /**
   * Possible values include: 'skip', 'create', 'attach'
  */
  bapProvisioningType?: string;
}

export interface InstanceCopyRequest {
  instanceIdToCopy?: string;
  instanceMetadata?: InstanceMetadata;
  byosaResourceMetadata?: ResourceMetadata;
  cdsResourceMetadata?: ResourceMetadata;
  /**
   * Possible values include: 'skip', 'create', 'attach'
  */
  bapProvisioningType?: string;
}

/**
 * Represents the base linked entity.
*/
export interface MeasureLinkedEntity {
  /**
   * Possible values include: 'base', 'join'
  */
  kind?: string;
  /**
   * Gets the name of the entity.
  */
  readonly entity?: string;
  /**
   * Gets the alias of the entity.
  */
  readonly alias?: string;
}

/**
 * Represents a variable condition.
*/
export interface MeasureVariableCondition {
  /**
   * Possible values include: 'replaceNulls', 'replaceTargetValues'
  */
  kind?: string;
}

/**
 * Represents a set of variable conditions to apply to a MeasureVariable.
*/
export interface MeasureVariableConditionGroup {
  /**
   * Attribute to use in condition.
  */
  name?: string;
  /**
   * Gets the MeasureVariableConditions.
  */
  conditions?: MeasureVariableCondition[];
}

/**
 * Represents a variable (computed column) in a measure
*/
export interface MeasureVariable {
  /**
   * Possible values include: 'arithmetic', 'date'
  */
  kind?: string;
  /**
   * Gets the name of the variable
  */
  readonly name?: string;
  /**
   * Gets the data type of the variable
  */
  readonly dataType?: string;
  /**
   * Gets the expression text for computing the variable
  */
  readonly expressionText?: string;
  /**
   * Gets the variable conditions
  */
  readonly variableConditionGroups?: MeasureVariableConditionGroup[];
}

/**
 * Base class to represent a measure expression
*/
export interface MeasureExpression {
  /**
   * Possible values include: 'constant', 'property', 'memberAccess', 'functionCall', 'and', 'or',
   * 'equals', 'notEquals', 'greaterThan', 'greaterThanOrEqualTo', 'lessThan', 'lessThanOrEqualTo',
   * 'contains', 'startsWith', 'endsWith', 'isNull', 'isNotNull', 'negate', 'add', 'subtract',
   * 'multiply', 'divide', 'modulo', 'exponent', 'today', 'now'
  */
  kind?: string;
}

/**
 * Represent a Segment Query.
*/
export interface SegmentMembershipCriteria {
  /**
   * Possible values include: 'and', 'or'
  */
  logicalOperator?: string;
  /**
   * Gets the Attribute of the entity used in segment criteria.
  */
  attribute?: string;
  /**
   * Possible values include: 'equals', 'notEquals', 'greaterThan', 'greaterThanOrEqualTo',
   * 'lessThan', 'lessThanOrEqualTo', 'any', 'contains', 'startsWith', 'endsWith', 'isNull',
   * 'isNotNull', 'all', 'isIn', 'isWithinLast', 'isBetween', 'isNotBetween', 'yearToDate'
  */
  comparisonOperator?: string;
  /**
   * Gets the list of Child criteria of segment.
  */
  childCriterias?: SegmentMembershipCriteria[];
  /**
   * Gets the Value in criteria.
  */
  value?: string;
  /**
   * Gets a value indicating whether case is ignored for this criteria.
  */
  ignoreCase?: boolean;
  /**
   * Gets the list of values in criteria.
  */
  listOfValues?: string[];
}

/**
 * Represents a dimension
*/
export interface MeasureDimension {
  /**
   * Gets the field on which group by will be applied
  */
  field?: string;
  /**
   * Gets the alias for the field
  */
  alias?: string;
  /**
   * Gets the display name for the dimension
  */
  displayName?: string;
  /**
   * Gets the order for the dimension
  */
  order?: number;
  /**
   * Possible values include: 'none', 'day', 'month', 'year'
  */
  bucket?: string;
  /**
   * Gets a value indicating whether the dimension is readonly or not
  */
  isReadOnly?: boolean;
}

/**
 * Represents an aggregate
*/
export interface MeasureAggregate {
  /**
   * Possible values include: 'sum', 'avg', 'min', 'max', 'count', 'countDistinct', 'first', 'last'
  */
  operation?: string;
  /**
   * Gets the field on which the aggregate operation is applied
  */
  field?: string;
  /**
   * Gets the alias for the field
  */
  alias?: string;
  /**
   * Gets the display name for the aggregate
  */
  displayName?: string;
  /**
   * Gets the order for the aggregate
  */
  order?: number;
}

/**
 * Represents a reference to an entity
*/
export interface EntityDependency {
  /**
   * Gets the qualified entity name.
  */
  qualifiedEntityName?: string;
  /**
   * Possible values include: 'unspecified', 'profile', 'conflationMap', 'activity',
   * 'aggregateKpi', 'profileKpi', 'unifiedActivity', 'segment', 'intelligence',
   * 'genericPrediction', 'enrichment', 'insights', 'derivedEntity', 'quarantine'
  */
  type?: string;
  /**
   * Gets the list of attributes included in the dependency.
  */
  attributeNames?: string[];
  /**
   * Gets the list of relationships included in the dependency
  */
  relationshipNames?: string[];
}

/**
 * Represents a measure definition
*/
export interface MeasureDefinition {
  /**
   * Possible values include: 'entity', 'attribute'
  */
  kind?: string;
  /**
   * Gets a value indicating whether the current measure is a scalar measure e doesn't have any
   * dimensions
  */
  readonly isScalar?: boolean;
  /**
   * Gets list of linked entities associated with the measure.
  */
  readonly linkedEntities?: MeasureLinkedEntity[];
  /**
   * Gets list of variables (computed columns) for the measure.
  */
  readonly variables?: MeasureVariable[];
  filters?: MeasureExpression;
  filteringCriteria?: SegmentMembershipCriteria;
  /**
   * Gets list of dimensions with the measure.
  */
  readonly dimensions?: MeasureDimension[];
  /**
   * Gets list of aggregates of the measure.
  */
  readonly aggregates?: MeasureAggregate[];
  /**
   * Gets a value indicating whether the current measure is a profile measure
  */
  readonly isProfile?: boolean;
  /**
   * Gets the user specified custom SQL query.
  */
  readonly measureQuerySql?: string;
  /**
   * Possible values include: 'structured', 'manual'
  */
  type?: string;
  /**
   * Gets the indicating whether the Business Measure is Scalar or not.
  */
  readonly isManualQueryScalar?: boolean;
  /**
   * Gets the list of measures that this measure depends on.
  */
  readonly dependencies?: EntityDependency[];
}

/**
 * Represents the measure evaluation details for a particular measure. It includes various
 * properties pertaining to an
 * evaluation including the measure name, orchestrationId, start time, state, errors (if-any) etc.
 * This latest evaluation
 * is stored in the measure metadata, while historical copies are written to table storage.
*/
export interface Evaluation {
  lastSuccessfulRunId?: string;
  /**
   * Possible values include: 'none', 'running', 'failed', 'completed'
  */
  state?: string;
  /**
   * Gets or sets the evaluation completion time.
  */
  endTime?: Date;
  /**
   * Gets or sets the error (if any) that occured during the measure evaluation.
  */
  error?: string;
}

export interface ScalarOutput {
  /**
   * Gets the output folder path for the evaluation.
  */
  values?: { [propertyName: string]: string };
  measureName?: string;
  /**
   * Gets the evaluation start time.
  */
  evaluationTime?: Date;
}

/**
 * Represents measure evaluation stats
*/
export interface EvaluationStats {
  /**
   * Gets the last successful evaluation
  */
  lastSuccessful?: Date;
  /**
   * Gets the number of consecutive failures
  */
  consecutiveFailureCount?: number;
}

export interface StringInfo {
  value?: string;
  /**
   * Possible values include: 'activityMappingDuplicateMappingOnEntity',
   * 'activityMappingEmptyInput', 'activityMappingInvalidKeyAttribute',
   * 'activityMappingInvalidRelationshipAttribute', 'activityMappingInvalidStartEndTimeField',
   * 'activityMappingInvalidStartTimeFieldValue', 'apiInternalError', 'apiVersionNotSupported',
   * 'authEmptyAuthorizationCode', 'authEmptyAuthorizationCodeError', 'authEmptyBearerToken',
   * 'authEmptyBearerTokenError', 'authEmptyRedirect', 'authEmptyRedirectUrl',
   * 'authEmptyRefreshToken', 'authEmptyState', 'authInvalidApp', 'authInvalidAppType',
   * 'authInvalidToken', 'authUserHasC360LicenseError', 'configurationControllerMissingInput',
   * 'customer360ApiInvalidIdentity', 'customer360ApiInvalidTenantIdClaims',
   * 'customer360ApiInvalidUserIdClaims', 'dataRefreshInvalidScheduleRequest',
   * 'dataSourceCreateAlreadyExistError', 'dataSourceModelAlreadyExistError',
   * 'dataSourceDataSourceCanNotDelete', 'dataSourceDataSourceDeleted',
   * 'dataSourceDataSourceNotFound', 'dataSourceDuplicateDataSourceName',
   * 'dataSourceEmptyDataSource', 'dataSourceEmptyDataSourceName',
   * 'dataSourceEmptyDataSourceNameError', 'dataSourceEmptyAttributeError',
   * 'dataLakeAccountInvalidError', 'dataLakeSecretInvalidError', 'dataSourceModelNotFoundError',
   * 'modelDataTypeError', 'modelDataConvertError', 'resourceMetadataNotFoundError',
   * 'dataSourceInactiveInstance', 'dataSourceInstanceNotFound', 'dataSourceCreationFailed',
   * 'dataSourceInvalidDataSourceName', 'dataSourceInvalidDataSourceNameCharacter',
   * 'dataSourceInvalidEntityNames', 'dataSourceMetadataExceedsLimit', 'dataSourceNotFound',
   * 'dataSourceNotProvisioned', 'dataSourceRefreshTimeout', 'dataSourceUpdateAlreadyExistError',
   * 'dataSourceUpdateDependenciesError', 'datasourceIngestionUnexpectedError',
   * 'dynamics365EmptyHeader', 'entityDataControllerContentType',
   * 'entityMetadataCanNotMarkAttribute', 'entityMetadataCanNotUpdateEntity',
   * 'entityMetadataCanNotUpdateEntityOfActivityType',
   * 'entityMetadataForAttributeNotFoundForEntity', 'entityMetadataNotFoundForEntity',
   * 'failedToSubmiProfileStoreJob', 'gdprDeleteOldSnapshotsConfiguratonError',
   * 'gdprDeleteOldSnapshotsNonC360DataflowsError', 'graphApiEmptySearchTerm',
   * 'graphApiPrincipalIdMissingInRequest', 'graphApiPrincipalIdsExceedslimit',
   * 'graphApiPrincipalIdsExceedslimitError', 'graphApiTopLimitError',
   * 'graphApiGroupDirectoryInfoFailed', 'graphApiUserDirectoryInfoFailed',
   * 'instanceNoAssignmentsInRequest', 'instanceUserSettingsMissing',
   * 'instancePreferredLanguageMissing', 'instancePreferredRegionalFormatMissing',
   * 'invalidDataSourceType', 'invocationBadRequestInReadingHeaderInfo',
   * 'invocationFailedBindToMethod', 'invocationUnsupportedMediaType',
   * 'measuresProcessingOrchestrationSkipMeasuresAndNotify', 'nullOrEmptyInstanceId',
   * 'offlineGraphIngestionOrchestrationNotify', 'segmentEvaluationOrchestrationNotify',
   * 'profileStoreIngestionFailedWithJobInfo', 'profileStoreIngestionOrchestrationFailed',
   * 'profileStoreOrchestrationSuccessful', 'publicMetadataControllerAnonymousType',
   * 'rbacAADDirectoryObjectNotFound', 'rbacCanNotRevokePermissionFromInstance',
   * 'rbacDeletedRoleAssignmentsFromUser', 'rbacInvalidRole', 'rbacRoleIsNotValid',
   * 'rbacUnsupportedPrincipalType', 'rbacUserNotFound', 'refreshBackgroundTaskRunningError',
   * 'refreshConflationCancelled', 'refreshConflationMetadataNotFound',
   * 'refreshConflationJobFailed', 'refreshEnrichmentMetadataNotFound',
   * 'refreshEnrichmentMisconfigured', 'refreshEnrichmentRequestExceeded',
   * 'refreshEnrichmentRequestThrottling', 'refreshExportCancelled', 'refreshExportCompleted',
   * 'refreshExportFailed', 'refreshExportRequestThrottling', 'refreshExportSkipped',
   * 'refreshMatchRequestThrotling', 'refreshMeasuresEvaluationRequestThrottling',
   * 'refreshMergeRequestThrotling', 'refreshPrerequisitesUnmetError',
   * 'refreshRunningOrchestrationNotFound', 'resourceBuilderFailure',
   * 'segmentAdvancedEditorNotEnabled', 'staleMatchMetadataError', 'staleMatchRunError',
   * 'testName', 'measuresProcessingOrchestrationFailed',
   * 'measuresProcessingOrchestrationFailedV2', 'offlineGraphIngestionOrchestrationFailed',
   * 'segmentEvaluationOrchestrationFailed', 'matchMergeOrchestrationFailed',
   * 'refreshMatchPairsEntityDoesNotExist', 'invalidSegmentDefinitionErrorMessage',
   * 'clauseForNextRefresh', 'refreshIntelligenceCancelled', 'refreshIntelligenceCompleted',
   * 'refreshIntelligenceFailed', 'refreshIntelligenceSkipped', 'refreshIntelligenceDisabled',
   * 'refreshConflationConfigurationNotFound', 'conflationPlanInvalid',
   * 'conflationMetadataNotFoundForEntity', 'conflationMetadataNotFoundForColumn',
   * 'conflationConfigurationInvalid', 'conflationUnexpectedError', 'matchPairsEntityDataMissing',
   * 'matchPairsEntityNotExist', 'conflationResolutionInvalid',
   * 'intelligenceUnsupportedDiscoverySource', 'refreshDataPreparationCancelled',
   * 'refreshDataPreparationRequestThrottling', 'refreshDataPreparationFailed', 'bapNotMapped',
   * 'bapCannotCreateEnvironment', 'bapInvalidEnvironmentDisplayNameLength',
   * 'bapInvalidEnvironmentDisplayName', 'bapInvalidEnvironmentLocation',
   * 'bapInvalidEnvironmentSku', 'bapInvalidEnvironment', 'bapInvalidTenantEnvironmentLimit',
   * 'bapInvalidUserEnvironmentLimit', 'dataSourceIngestionCancelled',
   * 'dataSourceIngestionSkippedNoEntities', 'genericPredictionEntitiesNotAvailable',
   * 'genericPredictionEntityPartitionsNotAvailable',
   * 'genericPredictionEntityWithLabelAttributeNotAvailable',
   * 'genericPredictionAttributesNotAvailable', 'invalidJarvisEntityCreationErrorMessage',
   * 'activityIngestionActivityIdNotFound', 'activityIngestionActivityTimeNotFound',
   * 'activityIngestionIncorrectMinViewFields', 'activityIngestionNoJarvisColumnMapping',
   * 'activityIngestionNoPrimaryKey', 'activityIngestionNoSourceStream',
   * 'activityIngestionNoSourceStreamWithCorrectActivityName', 'activityIngestionNoStartOrEndTime',
   * 'activityIngestionRangeIndexNotFound', 'activityIngestionUniqueSourceStream',
   * 'entityNoPrimaryKey', 'invalidSegmentAdvancedSegCreateInInvalidState', 'invalidSegmentFormat',
   * 'invalidSegmentNameExists', 'inavlidSegmentType', 'inavlidSegmentValidationDisabled',
   * 'invalidSegmentNameConflict', 'invalidSegmentNoExistingSegWithName',
   * 'invalidSegmentSegNotFound', 'invalidSegmentValidationNotAllowedForState',
   * 'invalidSegmentValidationNotAllowedForType', 'segmentNotFound',
   * 'dataSourceEmptyResourceIdError', 'invalidOrganizationUrl', 'enablingCdsEntitiesFailed',
   * 'dataSourceIngestionSkippedForMissingCdsModelJsonPath',
   * 'dataSourceIngestionSkippedForCdsModelIncomplete', 'missingOrganizationUrl',
   * 'searchStoreUnavailable', 'profileStoreUnavailable', 'unsupportedInsightType',
   * 'invalidInsightInputGeneric', 'invalidMalformedInsightInputPayload',
   * 'invalidInsightInputMissingName'
  */
  key?: string;
  args?: string[];
}

/**
 * Represents measure sql validation stats
*/
export interface SqlValidationStats {
  /**
   * Gets the last validation evaluation date
  */
  validationDate?: Date;
  /**
   * Gets the number of consecutive failures
  */
  error?: string;
}

/**
 * Represents metadata for a measure (or KPI).
*/
export interface MeasureMetadata {
  readonly displayName?: string;
  /**
   * Gets the unique name of the measure
  */
  name?: string;
  /**
   * Gets the description of the measure.
  */
  description?: string;
  definition?: MeasureDefinition;
  latestEvaluation?: Evaluation;
  output?: ScalarOutput;
  evaluationStats?: EvaluationStats;
  errorDescription?: StringInfo;
  sqlValidationStats?: SqlValidationStats;
  /**
   * Gets the evaluation history for the measure. (not persisted in store)
  */
  evaluationHistory?: Evaluation[];
  /**
   * Gets the output history for the measure. (not persisted in store)
  */
  outputHistory?: ScalarOutput[];
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

export interface SourceLocation {
  line?: number;
  column?: number;
}

export interface LogMessage {
  location?: SourceLocation;
  message?: string;
}

export interface ParsingError {
  messages?: LogMessage[];
  /**
   * Possible values include: 'unknown', 'parsingFailed', 'entityNotFound', 'attributeNotFound',
   * 'unsupportedSyntax', 'invalidOperation'
  */
  code?: string;
}

export interface DependencyValidationIssue {
  /**
   * Possible values include: 'mapInvalid', 'matchRuleInvalid', 'mergePolicyInvalid',
   * 'relationshipInvalid', 'measureDefinitionInvalid', 'segmentDefinitionInvalid',
   * 'unifiedActivitiyMappingInvalid', 'generic'
  */
  type?: string;
  /**
   * Possible values include: 'error', 'warning'
  */
  severity?: string;
  id?: string;
  description?: string;
}

export interface DeletionResponse {
  isDeleted?: boolean;
  issues?: DependencyValidationIssue[];
}

export interface ProfileStoreModuleRunInfo {
  /**
   * Gets the LastSuccessfulRunId for every fullyQualifiedEntity.
  */
  runInfo?: { [propertyName: string]: string };
}

export interface ProfileStoreCollectionInfo {
  /**
   * Possible values include: 'empty', 'inBuild', 'queryable'
  */
  currentState?: string;
  /**
   * Gets the row count of customer file yielded from merge output.
  */
  rowCount?: number;
  /**
   * Gets the size of customer file yielded from merge .
  */
  size?: number;
  /**
   * Gets the flag that tells if the Activity Store Job has run successfully.
  */
  activityStoreRunSuccessful?: boolean;
  /**
   * Gets the state of profile store hydration per job type.
  */
  profileStoreHydrationStateInfo?: { [propertyName: string]: string };
}

/**
 * Represents runtime profile store state
*/
export interface ProfileStoreStateInfo {
  /**
   * Gets the latest date of ingestion.
  */
  ingestionTime?: Date;
  primaryInfo?: ProfileStoreCollectionInfo;
  secondaryInfo?: ProfileStoreCollectionInfo;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

export interface RoleDefinition {
  readonly description?: string;
  readonly roleName?: string;
}

/**
 * Represents a role assignment Metadata.
*/
export interface RoleAssignment {
  /**
   * Gets the Id of the principal.
  */
  principalId?: string;
  /**
   * Possible values include: 'user', 'group', 'app'
  */
  principalType?: string;
  /**
   * Gets the roles the principal belongs to.
  */
  roles?: string[];
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

/**
 * Represents a Relationship
*/
export interface RelationshipMetadata {
  /**
   * Gets the friendly name of the relationship.
  */
  friendlyName?: string;
  /**
   * Gets the unique name for relationship
  */
  name?: string;
  /**
   * Gets the description for relationship
  */
  description?: string;
  /**
   * Possible values include: 'singleKeyRelationshipOrigin', 'singleKeyRelationshipDestination',
   * 'dataSourceLineageOrigin', 'dataSourceLineageDestination'
  */
  relationshipType?: string;
  /**
   * Gets the name of the foreign key reference attribute that this relationship originates from.
  */
  fromAttributeName?: string;
  /**
   * Gets the name of the entity this relationship originates from.
  */
  fromEntityName?: string;
  /**
   * Gets the name of the foreign key attribute that this relationship points to.
  */
  toAttributeName?: string;
  /**
   * Gets the name of the entity this relationship points to.
  */
  toEntityName?: string;
  /**
   * Possible values include: 'oneToMany', 'oneToOne'
  */
  cardinality?: string;
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

/**
 * Represents search configuration for an attribute
*/
export interface AttributeSearchProperties {
  /**
   * Gets a value indicating whether the attribute supports full text search.
  */
  isSearchable?: boolean;
  /**
   * Gets a value indicating whether the attribute supports filtering.
  */
  isFilterable?: boolean;
  /**
   * Gets a value indicating whether the attribute can be included as facet results.
  */
  isFacetable?: boolean;
  /**
   * Gets an optional specification for search faceting used at query time (advanced).
  */
  facetSpecification?: string;
  /**
   * Gets a value indicating whether the attribute supports ordering.
  */
  isSortable?: boolean;
}

export interface AttributeSearchConfiguration {
  /**
   * Gets the attribute name.
  */
  name?: string;
  properties?: AttributeSearchProperties;
}

export interface EntitySearchConfiguration {
  /**
   * Gets unique entity name for this entity
  */
  qualifiedEntityName?: string;
  /**
   * Gets the attribute search config
  */
  attributes?: AttributeSearchConfiguration[];
}

/**
 * Represents search configuration of an instance
*/
export interface InstanceSearchConfiguration {
  /**
   * Gets search configurations for entities
  */
  entityConfig?: EntitySearchConfiguration[];
  /**
   * Gets a value indicating whether the configuration was system generated
  */
  isSystemGenerated?: boolean;
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

/**
 * Represent a Row set.
*/
export interface SegmentationRowset {
  /**
   * Possible values include: 'union', 'intersect', 'except', 'none'
  */
  rowsetOperation?: string;
  criteria?: SegmentMembershipCriteria;
  /**
   * Gets the relationship path to use for segment criteria.
  */
  paths?: string[][];
}

/**
 * Represent a Segment Query.
*/
export interface SegmentationQuery {
  /**
   * Possible values include: 'structured', 'manual'
  */
  type?: string;
  /**
   * Gets list of attributes to be projected in segment.
  */
  projections?: string[];
  /**
   * Gets list of rowsets of segment.
  */
  rowsets?: SegmentationRowset[];
  /**
   * Gets the user specified custom SQL query.
  */
  segmentationQuerySql?: string;
}

export interface SegmentationPublishStats {
  /**
   * Possible values include: 'None', 'Queued', 'Running', 'CompletedSuccess', 'CompletedFailure',
   * 'Cancelled', 'Interrupted', 'NotQualified'
  */
  jobStatus?: string;
  evaluationDate?: Date;
  entityCount?: number;
  error?: StringInfo;
  lastSuccessfulRunId?: string;
}

/**
 * Represents historical Segment statistics.
*/
export interface HistoricalSegmentStats {
  /**
   * Gets the segment ran date.
  */
  evaluationDate?: Date;
  /**
   * Gets the count of entity.
  */
  entityCount?: number;
  /**
   * Gets the segment evaluation job status.
  */
  jobStatus?: string;
  error?: StringInfo;
}

/**
 * Represents a Segment Metadata.
*/
export interface SegmentMetadata {
  /**
   * Gets the unique name of the segment
  */
  name?: string;
  /**
   * Gets the friendlyName of the segment.
  */
  friendlyName?: string;
  /**
   * Gets the description of the segment.
  */
  description?: string;
  segmentQueryExpression?: SegmentationQuery;
  /**
   * Possible values include: 'inactive', 'active', 'validating', 'validated', 'invalid',
   * 'validationError'
  */
  state?: string;
  /**
   * Gets the error description when the segment metadata has some issues after refresh.
  */
  errorDescription?: string;
  /**
   * Gets the end date of the segment.
  */
  endDate?: Date;
  evaluationStatus?: SegmentationPublishStats;
  sqlValidationStats?: SqlValidationStats;
  /**
   * Gets the segment evaluation status history. (not persisted in store)
  */
  evaluationStatusHistory?: HistoricalSegmentStats[];
  /**
   * Gets the version number of this object.
  */
  readonly version?: number;
  /**
   * Gets the UPN of the user who last updated this record.
  */
  readonly updatedBy?: string;
  /**
   * Gets the time the object was last updated.
  */
  readonly updatedUtc?: Date;
  /**
   * Gets the email address of the user who created this record.
  */
  readonly createdBy?: string;
  /**
   * Gets the time the object was initially created.
  */
  readonly createdUtc?: Date;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

/**
 * Represents custom information about a task.
*/
export interface CustomTaskInformation {
  /**
   * Possible values include: 'test', 'segmentation', 'measures', 'export'
  */
  kind?: string;
}

export interface SelectionReason {
  /**
   * Possible values include: 'unknown', 'requested', 'firstRun', 'unsuccessful', 'lastRunSkipped',
   * 'alreadyRunning', 'modifiedInputs', 'upstreamRerunning', 'dependantSystemNode',
   * 'dependsOnMerge'
  */
  code?: string;
  details?: string;
}

export interface GraphTaskInfo {
  taskId?: string;
  /**
   * Possible values include: 'queued', 'needsUpdate', 'running', 'failed', 'timedOut', 'aborted',
   * 'deleted', 'successful', 'skipped'
  */
  taskStatus?: string;
  /**
   * Possible values include: 'none', 'ingestion', 'derivedEntity', 'dataPreparation', 'map',
   * 'match', 'merge', 'profileStore', 'search', 'activity', 'attributeMeasures', 'entityMeasures',
   * 'measures', 'segmentation', 'enrichment', 'intelligence', 'aiBuilder', 'insights', 'export',
   * 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'all'
  */
  operationType?: string;
  /**
   * Possible values include: 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel'
  */
  subType?: string;
  jobIds?: string[];
  friendlyName?: string;
  endTimestamp?: Date;
  ciError?: CIResult;
  ciErrors?: CIResult[];
  waitingTaskIds?: string[];
  additionalInfo?: CustomTaskInformation;
  submittedTimestamp?: Date;
}

export interface GraphJobInfo {
  jobId?: string;
  /**
   * Possible values include: 'full', 'incremental'
  */
  jobType?: string;
  /**
   * Possible values include: 'onDemand', 'scheduled'
  */
  jobSubmissionKind?: string;
  /**
   * Possible values include: 'queued', 'needsUpdate', 'running', 'failed', 'timedOut', 'aborted',
   * 'deleted', 'successful', 'skipped'
  */
  jobStatus?: string;
  /**
   * Possible values include: 'none', 'ingestion', 'derivedEntity', 'dataPreparation', 'map',
   * 'match', 'merge', 'profileStore', 'search', 'activity', 'attributeMeasures', 'entityMeasures',
   * 'measures', 'segmentation', 'enrichment', 'intelligence', 'aiBuilder', 'insights', 'export',
   * 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'all'
  */
  operationType?: string;
  /**
   * Possible values include: 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel'
  */
  subType?: string;
  endTimestamp?: Date;
  shouldForceRunRequestedNodes?: boolean;
  tasks?: GraphTaskInfo[];
  idList?: string[];
  submittedTimestamp?: Date;
}

export interface OnDemandJobRequest {
  graphName?: string;
  /**
   * Possible values include: 'none', 'ingestion', 'derivedEntity', 'dataPreparation', 'map',
   * 'match', 'merge', 'profileStore', 'search', 'activity', 'attributeMeasures', 'entityMeasures',
   * 'measures', 'segmentation', 'enrichment', 'intelligence', 'aiBuilder', 'insights', 'export',
   * 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'all'
  */
  operationType?: string;
  /**
   * Possible values include: 'onDemand', 'scheduled'
  */
  submissionKind?: string;
  /**
   * Possible values include: 'full', 'incremental'
  */
  jobType?: string;
  identifiers?: string[];
  forceRunRequested?: boolean;
  /**
   * Possible values include: 'FailedOrModifiedRecursive', 'FailedRecursive', 'FailedOrModified',
   * 'Failed'
  */
  inputRefreshMode?: string;
}

export interface DataInfo {
  /**
   * Possible values include: 'resource', 'entity', 'custom'
  */
  kind?: string;
  /**
   * Possible values include: 'none', 'new', 'update'
  */
  changeType?: string;
  /**
   * Gets the name of the data info.
  */
  name?: string;
}

export interface GraphNodeInfo {
  /**
   * Possible values include: 'none', 'ingestion', 'derivedEntity', 'dataPreparation', 'map',
   * 'match', 'merge', 'profileStore', 'search', 'activity', 'attributeMeasures', 'entityMeasures',
   * 'measures', 'segmentation', 'enrichment', 'intelligence', 'aiBuilder', 'insights', 'export',
   * 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'all'
  */
  operationType?: string;
  /**
   * Possible values include: 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel'
  */
  subType?: string;
  identifier?: string;
  friendlyName?: string;
  jobIds?: string[];
  /**
   * Possible values include: 'queued', 'needsUpdate', 'running', 'failed', 'timedOut', 'aborted',
   * 'deleted', 'successful', 'skipped'
  */
  taskStatus?: string;
  lastSuccessJobIds?: string[];
  endTimestamp?: Date;
  lastSuccessfulTimestamp?: Date;
  ciError?: CIResult;
  ciErrors?: CIResult[];
  additionalInfo?: CustomTaskInformation;
  selectionReason?: SelectionReason;
}

export interface TimezoneDetail {
  id?: string;
  name?: string;
}

/**
 * Represents a DAG refresh schedule
*/
export interface WorkflowRefreshSchedule {
  /**
   * Possible values include: 'none', 'ingestion', 'derivedEntity', 'dataPreparation', 'map',
   * 'match', 'merge', 'profileStore', 'search', 'activity', 'attributeMeasures', 'entityMeasures',
   * 'measures', 'segmentation', 'enrichment', 'intelligence', 'aiBuilder', 'insights', 'export',
   * 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'all'
  */
  operationType?: string;
  /**
   * Possible values include: 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel'
  */
  subType?: string;
  /**
   * Gets the identifiers of the schedule
  */
  identifiers?: string[];
  /**
   * Possible values include: 'full', 'incremental'
  */
  jobType?: string;
  /**
   * Gets a value indicating whether the schedule is active.
  */
  readonly isActive?: boolean;
  /**
   * Gets the ID of the timezone
  */
  readonly timezoneId?: string;
  /**
   * Gets the schedule in CRON format
  */
  readonly cronSchedules?: string[];
  /**
   * Gets the ID of the schedule
  */
  readonly scheduleId?: string;
  /**
   * Gets the Customer Insights instance id associated with this object.
  */
  readonly instanceId?: string;
}

export interface EntityDataProfile {
  qualifiedEntityName?: string;
  rowCount?: number;
  quarantineRowCount?: number;
  profilingDate?: Date;
  profiledAttributes?: string;
  corruptAttributes?: string;
}
