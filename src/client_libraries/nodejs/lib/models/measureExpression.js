/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Base class to represent a measure expression
 *
 */
class MeasureExpression {
  /**
   * Create a MeasureExpression.
   * @property {string} [kind] Possible values include: 'constant', 'property',
   * 'memberAccess', 'functionCall', 'and', 'or', 'equals', 'notEquals',
   * 'greaterThan', 'greaterThanOrEqualTo', 'lessThan', 'lessThanOrEqualTo',
   * 'contains', 'startsWith', 'endsWith', 'isNull', 'isNotNull', 'negate',
   * 'add', 'subtract', 'multiply', 'divide', 'modulo', 'exponent', 'today',
   * 'now'
   */
  constructor() {
  }

  /**
   * Defines the metadata of MeasureExpression
   *
   * @returns {object} metadata of MeasureExpression
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MeasureExpression',
      type: {
        name: 'Composite',
        className: 'MeasureExpression',
        modelProperties: {
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MeasureExpression;
