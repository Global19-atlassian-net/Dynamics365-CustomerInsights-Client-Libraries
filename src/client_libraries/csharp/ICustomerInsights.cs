// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Dynamics.CustomerInsights.Api
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// API version 1.0
    /// </summary>
    public partial interface ICustomerInsights : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the specific attribute profile for the entity.
        /// </summary>
        /// <remarks>
        /// Gets the specific attribute profile for the entity.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id.
        /// </param>
        /// <param name='qualifiedEntityName'>
        /// Qualified Entity Name.
        /// </param>
        /// <param name='attributeName'>
        /// Attribute Name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttributeDataProfile,GetAnAttributeProfileHeaders>> GetAnAttributeProfileWithHttpMessagesAsync(string instanceId, string qualifiedEntityName, string attributeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetches a collection of DataSourceInfo configured for the Customer
        /// Insights instance.
        /// </summary>
        /// <remarks>
        /// Fetches a collection of DataSourceInfo configured for the Customer
        /// Insights instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id for which to fetch data source info.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllDataSourcesHeaders>> GetAllDataSourcesWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetches a DataSourceInfo matching the dataSourceId configured for
        /// the Customer Insights instance.
        /// </summary>
        /// <remarks>
        /// Fetches a DataSourceInfo matching the dataSourceId configured for
        /// the Customer Insights instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id to fetch data source info for.
        /// </param>
        /// <param name='dataSourceId'>
        /// Format - uuid. The data source id to fetch info for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDataSourceHeaders>> GetDataSourceWithHttpMessagesAsync(string instanceId, string dataSourceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a data source from the instance.
        /// </summary>
        /// <remarks>
        /// Deletes a data source from the instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='dataSourceId'>
        /// Format - uuid. The data source id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteADataSourceHeaders>> DeleteADataSourceWithHttpMessagesAsync(string instanceId, string dataSourceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Writes an entity instance into the store, g. an activity entity.
        /// (Preview)
        /// </summary>
        /// <remarks>
        /// Writes an entity instance into the store, g. an activity entity.
        /// (Preview)
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance Id.
        /// </param>
        /// <param name='entityName'>
        /// Fully qualified entity name, consisting of 'DataSource_EntityName'
        /// e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
        /// </param>
        /// <param name='body'>
        /// JSON document representing the entity. The schema must be
        /// consistent with the entity metadata. Use GET action of this
        /// resource to obtain an example.
        /// </param>
        /// <param name='validUntil'>
        /// Format - date-time (as date-time in RFC3339). Expiration time of
        /// the change; ISO8601; optional. The value can be maximum 30 days in
        /// the future. If the datasource for this entity doesn't contain the
        /// changes after this time, the update disappears from the store.
        /// </param>
        /// <param name='caller'>
        /// String to identify the caller; optional.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateAnEntityHeaders>> CreateAnEntityWithHttpMessagesAsync(string instanceId, string entityName, object body = default(object), string validUntil = default(string), string caller = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an entity instance in the store, g. Customer entity.
        /// (Preview)
        /// </summary>
        /// <remarks>
        /// Updates an entity instance in the store, g. Customer entity.
        /// (Preview)
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance Id.
        /// </param>
        /// <param name='entityName'>
        /// Fully qualified entity name, e.g. 'Customer'.
        /// </param>
        /// <param name='entityId'>
        /// Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
        /// </param>
        /// <param name='body'>
        /// JSON document with set of changes to apply on the entity. Each
        /// change must be consistent with the entity metadata. Use GET action
        /// of this resource to obtain an example.
        /// </param>
        /// <param name='validUntil'>
        /// Format - date-time (as date-time in RFC3339). Expiration time of
        /// the change; ISO8601; optional. The value can be maximum 30 days in
        /// the future. If the datasource for this entity doesn't contain the
        /// changes after this time, the update disappears from the store.
        /// </param>
        /// <param name='caller'>
        /// String to identify the caller; optional.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateAnEntityHeaders>> UpdateAnEntityWithHttpMessagesAsync(string instanceId, string entityName, string entityId, object body = default(object), string validUntil = default(string), string caller = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submits an OData request to the service.
        /// </summary>
        /// <remarks>
        /// Submits an OData request to the service.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id.
        /// </param>
        /// <param name='relativePath'>
        /// Relative OData path. See
        /// https://www.odata.org/getting-started/basic-tutorial/ for info.
        /// </param>
        /// <param name='forceSearch'>
        /// Whether force use search to support the query.
        /// </param>
        /// <param name='proxy'>
        /// Whether or not we are requesting data by proxy.
        /// </param>
        /// <param name='search'>
        /// </param>
        /// <param name='select'>
        /// </param>
        /// <param name='skipToken'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='orderBy'>
        /// </param>
        /// <param name='expand'>
        /// </param>
        /// <param name='top'>
        /// Format - int32.
        /// </param>
        /// <param name='skip'>
        /// Format - int32.
        /// </param>
        /// <param name='skipNullFilterParameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEntitiesWithODataQueryParametersHeaders>> GetEntitiesWithODataQueryParametersWithHttpMessagesAsync(string instanceId, string relativePath = default(string), bool? forceSearch = default(bool?), bool? proxy = default(bool?), string search = default(string), string select = default(string), string skipToken = default(string), string filter = default(string), string orderBy = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? skipNullFilterParameters = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the flattened entity model for the provided instanceId.
        /// </summary>
        /// <remarks>
        /// Retrieves the flattened entity model for the provided instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id.
        /// </param>
        /// <param name='attributesAnnotations'>
        /// Indicates if extra annotations like 'ReadOnly' or 'Mandatory'
        /// should be included.
        /// </param>
        /// <param name='includeQuarantined'>
        /// Indicates if quarantined entities should be included in the output
        /// entity model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllEntityMetadataHeaders>> GetAllEntityMetadataWithHttpMessagesAsync(string instanceId, bool? attributesAnnotations = false, bool? includeQuarantined = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the entity metadata for the provided instanceId and
        /// entityName.
        /// </summary>
        /// <remarks>
        /// Retrieves the entity metadata for the provided instanceId and
        /// entityName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='entityName'>
        /// Entity name
        /// </param>
        /// <param name='attributesAnnotations'>
        /// Indicates if extra annotations like 'ReadOnly' or 'Mandatory'
        /// should be included.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEntityMetadataHeaders>> GetEntityMetadataWithHttpMessagesAsync(string instanceId, string entityName, bool? attributesAnnotations = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the entity size for the provided instanceId and
        /// entityName.
        /// </summary>
        /// <remarks>
        /// Retrieves the entity size for the provided instanceId and
        /// entityName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='entityName'>
        /// Entity name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetEntitySizeHeaders>> GetEntitySizeWithHttpMessagesAsync(string instanceId, string entityName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset scopes in the given instance. Provide optional management
        /// operation scope to reset only that scope. (Preview)
        /// </summary>
        /// <remarks>
        /// Reset scopes in the given instance. Provide optional management
        /// operation scope to reset only that scope. (Preview)
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance Id.
        /// </param>
        /// <param name='instanceManagementOperationScope'>
        /// The management operation scope for reset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ResetAnInstanceHeaders>> ResetAnInstanceWithHttpMessagesAsync(string instanceId, string instanceManagementOperationScope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset scopes in the given instance. Provide optional management
        /// operation scope to reset only that scope. (Preview)
        /// </summary>
        /// <remarks>
        /// Reset scopes in the given instance. Provide optional management
        /// operation scope to reset only that scope. (Preview)
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance Id.
        /// </param>
        /// <param name='instanceManagementOperationScope'>
        /// The management operation scope for reset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ResetInstanceForScopeHeaders>> ResetInstanceForScopeWithHttpMessagesAsync(string instanceId, string instanceManagementOperationScope, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves all instances of the current user.
        /// </summary>
        /// <remarks>
        /// Retrieves all instances of the current user.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllInstancesHeaders>> GetAllInstancesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves instances based on instance ids, it can only accept batch
        /// of instances.
        /// </summary>
        /// <remarks>
        /// Retrieves instances based on instance ids, it can only accept batch
        /// of instances.
        /// </remarks>
        /// <param name='body'>
        /// Instance ids of instances to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllInstancesInBatchesByInstanceidsHeaders>> GetAllInstancesInBatchesByInstanceidsWithHttpMessagesAsync(IList<System.Guid?> body = default(IList<System.Guid?>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves metadata for a Customer Insights instance based on its
        /// instanceId.
        /// </summary>
        /// <remarks>
        /// Retrieves metadata for a Customer Insights instance based on its
        /// instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Unique id for the Customer Insights instance.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetInstanceMetadataHeaders>> GetInstanceMetadataWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detele an instance.
        /// </summary>
        /// <remarks>
        /// Detele an instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteAnInstanceHeaders>> DeleteAnInstanceWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new instance.
        /// </summary>
        /// <remarks>
        /// Creates a new instance.
        /// </remarks>
        /// <param name='body'>
        /// The instance creation request.
        /// </param>
        /// <param name='isTrial'>
        /// True if the new instance is a trial instance. False otherwise.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateAnInstanceHeaders>> CreateAnInstanceWithHttpMessagesAsync(InstanceCreationRequest body = default(InstanceCreationRequest), bool? isTrial = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patches the Market Verticals, Display name, Domain Name, CDS
        /// environment and BYOSA secret to the instance.
        /// </summary>
        /// <remarks>
        /// Patches the Market Verticals, Display name, Domain Name, CDS
        /// environment and BYOSA secret to the instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateAnInstanceHeaders>> UpdateAnInstanceWithHttpMessagesAsync(string instanceId, InstanceCreationRequest body = default(InstanceCreationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new instance and copy metadata from an existing instance.
        /// </summary>
        /// <remarks>
        /// Create a new instance and copy metadata from an existing instance.
        /// </remarks>
        /// <param name='body'>
        /// The metadata to use to create the new instance.
        /// </param>
        /// <param name='isTrial'>
        /// True if the new instance is a trial instance. False otherwise.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CopyAnInstanceHeaders>> CopyAnInstanceWithHttpMessagesAsync(InstanceCopyRequest body = default(InstanceCopyRequest), bool? isTrial = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of measures metadata for the provided instanceId.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of measures metadata for the provided instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAListOfMeasuresMetadataHeaders>> GetAListOfMeasuresMetadataWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new measure metadata with measureMetadata on instanceId.
        /// </summary>
        /// <remarks>
        /// Create new measure metadata with measureMetadata on instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='body'>
        /// New Measure metadata to be created
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateAMeasureHeaders>> CreateAMeasureWithHttpMessagesAsync(string instanceId, MeasureMetadata body = default(MeasureMetadata), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the measure metadata for the provided instanceId and
        /// measureName.
        /// </summary>
        /// <remarks>
        /// Retrieves the measure metadata for the provided instanceId and
        /// measureName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='measureName'>
        /// Name of the measure
        /// </param>
        /// <param name='includeHistoricStats'>
        /// Boolean for historical stats
        /// </param>
        /// <param name='historicStatsDays'>
        /// Format - int32. Number of lookback days
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetMetadataForAMeasureHeaders>> GetMetadataForAMeasureWithHttpMessagesAsync(string instanceId, string measureName, bool? includeHistoricStats = false, int? historicStatsDays = 30, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates measures metadata for the provided instanceId and
        /// measureMetadata.
        /// Existing measure is retrieved using measureName.
        /// </summary>
        /// <remarks>
        /// Updates measures metadata for the provided instanceId and
        /// measureMetadata.
        /// Existing measure is retrieved using measureName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='measureName'>
        /// Name of the measure
        /// </param>
        /// <param name='body'>
        /// Update measure metadata
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateAMeasureHeaders>> UpdateAMeasureWithHttpMessagesAsync(string instanceId, string measureName, MeasureMetadata body = default(MeasureMetadata), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the measure metadata for the provided instanceId using
        /// measureName.
        /// </summary>
        /// <remarks>
        /// Deletes the measure metadata for the provided instanceId using
        /// measureName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='measureName'>
        /// Name of the measure
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteAMeasureHeaders>> DeleteAMeasureWithHttpMessagesAsync(string instanceId, string measureName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the KeyRing (collection of all alternate keys) for the given
        /// instance by alternate key.
        /// </summary>
        /// <remarks>
        /// Gets the KeyRing (collection of all alternate keys) for the given
        /// instance by alternate key.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Identifier for the instance
        /// </param>
        /// <param name='dataSourceName'>
        /// The name of the datasource that contains the given entity.
        /// </param>
        /// <param name='entityName'>
        /// The name of the entity that contains the given key.
        /// </param>
        /// <param name='key'>
        /// The value of the alternate key provided.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApiErrorResult,GetKeyRingHeaders>> GetKeyRingWithHttpMessagesAsync(string instanceId, string dataSourceName, string entityName, string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the profile store state infoformation.
        /// </summary>
        /// <remarks>
        /// Gets the profile store state infoformation.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetProfileStoreStateHeaders>> GetProfileStoreStateWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all role definitions.
        /// </summary>
        /// <remarks>
        /// Get all role definitions.
        /// </remarks>
        /// <param name='instanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RoleDefinition>,GetAllRoleDefinitionsHeaders>> GetAllRoleDefinitionsWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get role of current user.
        /// </summary>
        /// <remarks>
        /// Get role of current user.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RoleAssignment,GetCurrentUserRoleHeaders>> GetCurrentUserRoleWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds or updates a role assignment for a principal.
        /// </summary>
        /// <remarks>
        /// Adds or updates a role assignment for a principal.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='principalId'>
        /// The principal id.
        /// </param>
        /// <param name='body'>
        /// The role assignment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RoleAssignment>,UpdateARoleAssignmentHeaders>> UpdateARoleAssignmentWithHttpMessagesAsync(string instanceId, string principalId, RoleAssignment body = default(RoleAssignment), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a role assignment for the principal.
        /// </summary>
        /// <remarks>
        /// Deletes a role assignment for the principal.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='principalId'>
        /// The principal id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationHeaderResponse<DeletesARoleAssignmentHeaders>> DeletesARoleAssignmentWithHttpMessagesAsync(string instanceId, string principalId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all role assignments for the instance.
        /// </summary>
        /// <remarks>
        /// Gets all role assignments for the instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RoleAssignment>,GetAllRoleAssignmentsHeaders>> GetAllRoleAssignmentsWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all relationship metadata for the provided instanceId.
        /// </summary>
        /// <remarks>
        /// Gets all relationship metadata for the provided instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllRelationshipsHeaders>> GetAllRelationshipsWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates new relationship metadata for the provided instanceId,
        /// using input.
        /// </summary>
        /// <remarks>
        /// Creates new relationship metadata for the provided instanceId,
        /// using input.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='body'>
        /// The updated relationship metadata
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateARelationshipHeaders>> CreateARelationshipWithHttpMessagesAsync(string instanceId, RelationshipMetadata body = default(RelationshipMetadata), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the relationship metadata for the provided instanceId and
        /// relationshipName.
        /// </summary>
        /// <remarks>
        /// Gets the relationship metadata for the provided instanceId and
        /// relationshipName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='relationshipName'>
        /// Relationship name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetARelationshipHeaders>> GetARelationshipWithHttpMessagesAsync(string instanceId, string relationshipName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the relationship metadata for the provided instanceId and
        /// relationshipName.
        /// </summary>
        /// <remarks>
        /// Deletes the relationship metadata for the provided instanceId and
        /// relationshipName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='relationshipName'>
        /// Relationship name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeleteARelationshipHeaders>> DeleteARelationshipWithHttpMessagesAsync(string instanceId, string relationshipName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the relationship metadata for the provided instanceId and
        /// relationshipName, using input.
        /// </summary>
        /// <remarks>
        /// Updates the relationship metadata for the provided instanceId and
        /// relationshipName, using input.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='relationshipName'>
        /// Relationship name
        /// </param>
        /// <param name='body'>
        /// The updated relationship metadata
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateARelationshipHeaders>> UpdateARelationshipWithHttpMessagesAsync(string instanceId, string relationshipName, RelationshipMetadata body = default(RelationshipMetadata), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the search configuration for the instance.
        /// </summary>
        /// <remarks>
        /// Gets the search configuration for the instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSearchConfigurationHeaders>> GetSearchConfigurationWithHttpMessagesAsync(string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the search configuration for the instance.
        /// </summary>
        /// <remarks>
        /// Updates the search configuration for the instance.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='body'>
        /// The search configuration for the instance.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateSearchConfigurationHeaders>> UpdateSearchConfigurationWithHttpMessagesAsync(string instanceId, InstanceSearchConfiguration body = default(InstanceSearchConfiguration), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of segment metadata for the provided instanceId.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of segment metadata for the provided instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='includeHistoricStats'>
        /// Optional parameter to retrieve evaluation history of all the
        /// sgements in instanceId.
        /// </param>
        /// <param name='historicStatsDays'>
        /// Format - int32. Optional parameter to get number of days evaluation
        /// history.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAllSegmentsHeaders>> GetAllSegmentsWithHttpMessagesAsync(string instanceId, bool? includeHistoricStats = false, int? historicStatsDays = 10, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new segment metadata with segmentMetadata on instanceId.
        /// </summary>
        /// <remarks>
        /// Create new segment metadata with segmentMetadata on instanceId.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='body'>
        /// New Segment metadata to be created
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateASegmentHeaders>> CreateASegmentWithHttpMessagesAsync(string instanceId, SegmentMetadata body = default(SegmentMetadata), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Activate segment on instanceId with segmentName.
        /// </summary>
        /// <remarks>
        /// Activate segment on instanceId with segmentName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='segmentName'>
        /// Unique name of a segment
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ActivateSegmentHeaders>> ActivateSegmentWithHttpMessagesAsync(string instanceId, string segmentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deactivate segment on instanceId with segmentName.
        /// </summary>
        /// <remarks>
        /// Deactivate segment on instanceId with segmentName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='segmentName'>
        /// Unique name of a segment
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DeactivateSegmentHeaders>> DeactivateSegmentWithHttpMessagesAsync(string instanceId, string segmentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates segment metadata for the provided instanceId and
        /// segmentName with segmentMetadata.
        /// </summary>
        /// <remarks>
        /// Updates segment metadata for the provided instanceId and
        /// segmentName with segmentMetadata.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='segmentName'>
        /// Unique name of a segment
        /// </param>
        /// <param name='body'>
        /// New Segment metadata to be updated
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateASegmentHeaders>> UpdateASegmentWithHttpMessagesAsync(string instanceId, string segmentName, SegmentMetadata body = default(SegmentMetadata), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the segment metadata for the provided instanceId and
        /// segmentName.
        /// </summary>
        /// <remarks>
        /// Deletes the segment metadata for the provided instanceId and
        /// segmentName.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id
        /// </param>
        /// <param name='segmentName'>
        /// Unique name of a segment
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletionResponse,DeleteSegmentHeaders>> DeleteSegmentWithHttpMessagesAsync(string instanceId, string segmentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve information about a workflow job.
        /// </summary>
        /// <remarks>
        /// Retrieve information about a workflow job.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// The name of the workflow.
        /// </param>
        /// <param name='jobId'>
        /// Format - uuid. The job id.
        /// </param>
        /// <param name='includeTasks'>
        /// Flag to include tasks or not.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetAWorkflowJobInformationHeaders>> GetAWorkflowJobInformationWithHttpMessagesAsync(string instanceId, string workflowName, string jobId, bool? includeTasks = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel a job.
        /// </summary>
        /// <remarks>
        /// Cancel a job.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// The name of the workflow.
        /// </param>
        /// <param name='jobId'>
        /// Format - uuid. The job id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CancelAWorkflowJobHeaders>> CancelAWorkflowJobWithHttpMessagesAsync(string instanceId, string workflowName, string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of recent job information.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of recent job information.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// The name of the workflow.
        /// </param>
        /// <param name='top'>
        /// Format - int32. The number of job informations to retrieve.
        /// </param>
        /// <param name='includeTasks'>
        /// Flag to include tasks or not.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetListOfRecentWorkflowJobsHeaders>> GetListOfRecentWorkflowJobsWithHttpMessagesAsync(string instanceId, string workflowName, int? top = 10, bool? includeTasks = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submits a workflow of OperationTypeoperationType for the instance
        /// specified in instanceId.
        /// Optionally takes a list of identifiers, only if operationType is
        /// not OperationType.All and a flag
        /// forceRunRequested indicating whether to force run.
        /// </summary>
        /// <remarks>
        /// Submits a workflow of OperationTypeoperationType for the instance
        /// specified in instanceId.
        /// Optionally takes a list of identifiers, only if operationType is
        /// not OperationType.All and a flag
        /// forceRunRequested indicating whether to force run.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The Customer Insights instance id.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='body'>
        /// Job Creation Request.
        /// </param>
        /// <param name='operationType'>
        /// The workflow operation type.
        /// </param>
        /// <param name='identifiers'>
        /// A list of workflow identifiers.
        /// </param>
        /// <param name='forceRunRequested'>
        /// Whether to request a force run.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,SubmitAWorkflowJobHeaders>> SubmitAWorkflowJobWithHttpMessagesAsync(string instanceId, string workflowName, OnDemandJobRequest body = default(OnDemandJobRequest), string operationType = default(string), IList<string> identifiers = default(IList<string>), bool? forceRunRequested = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a list of historic task information for a workflow.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of historic task information for a workflow.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// The name of the workflow.
        /// </param>
        /// <param name='top'>
        /// Format - int32. The number of task informations to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetListOfWorkflowTaskInformationHistoryHeaders>> GetListOfWorkflowTaskInformationHistoryWithHttpMessagesAsync(string instanceId, string workflowName, int? top = 10, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the current status for a workflow.
        /// </summary>
        /// <remarks>
        /// Gets the current status for a workflow.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetWorkflowStatusHeaders>> GetWorkflowStatusWithHttpMessagesAsync(string instanceId, string workflowName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of supported timezones for creating workflow schedules.
        /// </summary>
        /// <remarks>
        /// Gets a list of supported timezones for creating workflow schedules.
        /// </remarks>
        /// <param name='workflowName'>
        /// Any workflow name.
        /// </param>
        /// <param name='instanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSupportedTimezonesHeaders>> GetSupportedTimezonesWithHttpMessagesAsync(string workflowName, string instanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all workflow refresh schedules.
        /// </summary>
        /// <remarks>
        /// Gets all workflow refresh schedules.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// Any workflow name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetWorkflowSchedulesHeaders>> GetWorkflowSchedulesWithHttpMessagesAsync(string instanceId, string workflowName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a workflow refresh schedule.
        /// </summary>
        /// <remarks>
        /// Create a workflow refresh schedule.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. The instance id.
        /// </param>
        /// <param name='workflowName'>
        /// Any workflow name.
        /// </param>
        /// <param name='body'>
        /// A schedule object to create.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateWorkflowRefreshScheduleHeaders>> CreateWorkflowRefreshScheduleWithHttpMessagesAsync(string instanceId, string workflowName, WorkflowRefreshSchedule body = default(WorkflowRefreshSchedule), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the entityProfile for the entity.
        /// </summary>
        /// <remarks>
        /// Gets the entityProfile for the entity.
        /// </remarks>
        /// <param name='instanceId'>
        /// Format - uuid. Customer Insights instance id.
        /// </param>
        /// <param name='qualifiedEntityName'>
        /// Qualified Entity Name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityDataProfile,GetAnEntityProfileHeaders>> GetAnEntityProfileWithHttpMessagesAsync(string instanceId, string qualifiedEntityName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
