/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a StringInfo.
 */
class StringInfo {
  /**
   * Create a StringInfo.
   * @property {string} [value]
   * @property {string} [key] Possible values include:
   * 'activityMappingDuplicateMappingOnEntity', 'activityMappingEmptyInput',
   * 'activityMappingInvalidKeyAttribute',
   * 'activityMappingInvalidRelationshipAttribute',
   * 'activityMappingInvalidStartEndTimeField',
   * 'activityMappingInvalidStartTimeFieldValue', 'apiInternalError',
   * 'apiVersionNotSupported', 'authEmptyAuthorizationCode',
   * 'authEmptyAuthorizationCodeError', 'authEmptyBearerToken',
   * 'authEmptyBearerTokenError', 'authEmptyRedirect', 'authEmptyRedirectUrl',
   * 'authEmptyRefreshToken', 'authEmptyState', 'authInvalidApp',
   * 'authInvalidAppType', 'authInvalidToken', 'authUserHasC360LicenseError',
   * 'configurationControllerMissingInput', 'customer360ApiInvalidIdentity',
   * 'customer360ApiInvalidTenantIdClaims',
   * 'customer360ApiInvalidUserIdClaims', 'dataRefreshInvalidScheduleRequest',
   * 'dataSourceCreateAlreadyExistError', 'dataSourceModelAlreadyExistError',
   * 'dataSourceDataSourceCanNotDelete', 'dataSourceDataSourceDeleted',
   * 'dataSourceDataSourceNotFound', 'dataSourceDuplicateDataSourceName',
   * 'dataSourceEmptyDataSource', 'dataSourceEmptyDataSourceName',
   * 'dataSourceEmptyDataSourceNameError', 'dataSourceEmptyAttributeError',
   * 'dataLakeAccountInvalidError', 'dataLakeSecretInvalidError',
   * 'dataSourceModelNotFoundError', 'modelDataTypeError',
   * 'modelDataConvertError', 'resourceMetadataNotFoundError',
   * 'dataSourceInactiveInstance', 'dataSourceInstanceNotFound',
   * 'dataSourceCreationFailed', 'dataSourceInvalidDataSourceName',
   * 'dataSourceInvalidDataSourceNameCharacter',
   * 'dataSourceInvalidEntityNames', 'dataSourceMetadataExceedsLimit',
   * 'dataSourceNotFound', 'dataSourceNotProvisioned',
   * 'dataSourceRefreshTimeout', 'dataSourceUpdateAlreadyExistError',
   * 'dataSourceUpdateDependenciesError', 'datasourceIngestionUnexpectedError',
   * 'dynamics365EmptyHeader', 'entityDataControllerContentType',
   * 'entityMetadataCanNotMarkAttribute', 'entityMetadataCanNotUpdateEntity',
   * 'entityMetadataCanNotUpdateEntityOfActivityType',
   * 'entityMetadataForAttributeNotFoundForEntity',
   * 'entityMetadataNotFoundForEntity', 'failedToSubmiProfileStoreJob',
   * 'gdprDeleteOldSnapshotsConfiguratonError',
   * 'gdprDeleteOldSnapshotsNonC360DataflowsError', 'graphApiEmptySearchTerm',
   * 'graphApiPrincipalIdMissingInRequest', 'graphApiPrincipalIdsExceedslimit',
   * 'graphApiPrincipalIdsExceedslimitError', 'graphApiTopLimitError',
   * 'graphApiGroupDirectoryInfoFailed', 'graphApiUserDirectoryInfoFailed',
   * 'instanceNoAssignmentsInRequest', 'instanceUserSettingsMissing',
   * 'instancePreferredLanguageMissing',
   * 'instancePreferredRegionalFormatMissing', 'invalidDataSourceType',
   * 'invocationBadRequestInReadingHeaderInfo', 'invocationFailedBindToMethod',
   * 'invocationUnsupportedMediaType',
   * 'measuresProcessingOrchestrationSkipMeasuresAndNotify',
   * 'nullOrEmptyInstanceId', 'offlineGraphIngestionOrchestrationNotify',
   * 'segmentEvaluationOrchestrationNotify',
   * 'profileStoreIngestionFailedWithJobInfo',
   * 'profileStoreIngestionOrchestrationFailed',
   * 'profileStoreOrchestrationSuccessful',
   * 'publicMetadataControllerAnonymousType', 'rbacAADDirectoryObjectNotFound',
   * 'rbacCanNotRevokePermissionFromInstance',
   * 'rbacDeletedRoleAssignmentsFromUser', 'rbacInvalidRole',
   * 'rbacRoleIsNotValid', 'rbacUnsupportedPrincipalType', 'rbacUserNotFound',
   * 'refreshBackgroundTaskRunningError', 'refreshConflationCancelled',
   * 'refreshConflationMetadataNotFound', 'refreshConflationJobFailed',
   * 'refreshEnrichmentMetadataNotFound', 'refreshEnrichmentMisconfigured',
   * 'refreshEnrichmentRequestExceeded', 'refreshEnrichmentRequestThrottling',
   * 'refreshExportCancelled', 'refreshExportCompleted', 'refreshExportFailed',
   * 'refreshExportRequestThrottling', 'refreshExportSkipped',
   * 'refreshMatchRequestThrotling',
   * 'refreshMeasuresEvaluationRequestThrottling',
   * 'refreshMergeRequestThrotling', 'refreshPrerequisitesUnmetError',
   * 'refreshRunningOrchestrationNotFound', 'resourceBuilderFailure',
   * 'segmentAdvancedEditorNotEnabled', 'staleMatchMetadataError',
   * 'staleMatchRunError', 'testName', 'measuresProcessingOrchestrationFailed',
   * 'measuresProcessingOrchestrationFailedV2',
   * 'offlineGraphIngestionOrchestrationFailed',
   * 'segmentEvaluationOrchestrationFailed', 'matchMergeOrchestrationFailed',
   * 'refreshMatchPairsEntityDoesNotExist',
   * 'invalidSegmentDefinitionErrorMessage', 'clauseForNextRefresh',
   * 'refreshIntelligenceCancelled', 'refreshIntelligenceCompleted',
   * 'refreshIntelligenceFailed', 'refreshIntelligenceSkipped',
   * 'refreshIntelligenceDisabled', 'refreshConflationConfigurationNotFound',
   * 'conflationPlanInvalid', 'conflationMetadataNotFoundForEntity',
   * 'conflationMetadataNotFoundForColumn', 'conflationConfigurationInvalid',
   * 'conflationUnexpectedError', 'matchPairsEntityDataMissing',
   * 'matchPairsEntityNotExist', 'conflationResolutionInvalid',
   * 'intelligenceUnsupportedDiscoverySource',
   * 'refreshDataPreparationCancelled',
   * 'refreshDataPreparationRequestThrottling', 'refreshDataPreparationFailed',
   * 'bapNotMapped', 'bapCannotCreateEnvironment',
   * 'bapInvalidEnvironmentDisplayNameLength',
   * 'bapInvalidEnvironmentDisplayName', 'bapInvalidEnvironmentLocation',
   * 'bapInvalidEnvironmentSku', 'bapInvalidEnvironment',
   * 'bapInvalidTenantEnvironmentLimit', 'bapInvalidUserEnvironmentLimit',
   * 'dataSourceIngestionCancelled', 'dataSourceIngestionSkippedNoEntities',
   * 'genericPredictionEntitiesNotAvailable',
   * 'genericPredictionEntityPartitionsNotAvailable',
   * 'genericPredictionEntityWithLabelAttributeNotAvailable',
   * 'genericPredictionAttributesNotAvailable',
   * 'invalidJarvisEntityCreationErrorMessage',
   * 'activityIngestionActivityIdNotFound',
   * 'activityIngestionActivityTimeNotFound',
   * 'activityIngestionIncorrectMinViewFields',
   * 'activityIngestionNoJarvisColumnMapping', 'activityIngestionNoPrimaryKey',
   * 'activityIngestionNoSourceStream',
   * 'activityIngestionNoSourceStreamWithCorrectActivityName',
   * 'activityIngestionNoStartOrEndTime',
   * 'activityIngestionRangeIndexNotFound',
   * 'activityIngestionUniqueSourceStream', 'entityNoPrimaryKey',
   * 'invalidSegmentAdvancedSegCreateInInvalidState', 'invalidSegmentFormat',
   * 'invalidSegmentNameExists', 'inavlidSegmentType',
   * 'inavlidSegmentValidationDisabled', 'invalidSegmentNameConflict',
   * 'invalidSegmentNoExistingSegWithName', 'invalidSegmentSegNotFound',
   * 'invalidSegmentValidationNotAllowedForState',
   * 'invalidSegmentValidationNotAllowedForType', 'segmentNotFound',
   * 'dataSourceEmptyResourceIdError', 'invalidOrganizationUrl',
   * 'enablingCdsEntitiesFailed',
   * 'dataSourceIngestionSkippedForMissingCdsModelJsonPath',
   * 'dataSourceIngestionSkippedForCdsModelIncomplete',
   * 'missingOrganizationUrl', 'searchStoreUnavailable',
   * 'profileStoreUnavailable', 'unsupportedInsightType',
   * 'invalidInsightInputGeneric', 'invalidMalformedInsightInputPayload',
   * 'invalidInsightInputMissingName'
   * @property {array} [args]
   */
  constructor() {
  }

  /**
   * Defines the metadata of StringInfo
   *
   * @returns {object} metadata of StringInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StringInfo',
      type: {
        name: 'Composite',
        className: 'StringInfo',
        modelProperties: {
          value: {
            required: false,
            serializedName: 'value',
            type: {
              name: 'String'
            }
          },
          key: {
            required: false,
            serializedName: 'key',
            type: {
              name: 'String'
            }
          },
          args: {
            required: false,
            serializedName: 'args',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = StringInfo;
